aalt:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. The application
    determines the glyph ID for the default form of a given character (default glyph
    from the ''cmap'' table with no features applied). It then checks to see whether
    the glyph ID is found in the ''aalt'' coverage table. If so, the application retrieves
    the alternate glyphs mapped in the alternate substitution lookup.'
  example: A user inputs the P in Poetica, and is presented with a choice of the four
    standard capital forms, the eight swash capital forms, the initial capital form
    and the small capital form.
  feature interaction: This feature may be used in combination with other features.
  friendly name: Access All Alternates
  function: 'This feature makes all variations of a selected character accessible.
    This serves several purposes: An application may not support the feature by which
    the desired glyph would normally be accessed; the user may need a glyph outside
    the context supported by the normal substitution, or the user may not know what
    feature produces the desired glyph. Since many-to-one substitutions are not covered,
    ligatures would not appear in this table unless they were variant forms of another
    ligature.'
  recommended implementation: The 'aalt' table groups glyphs into semantic units.
    These units include the glyph which represents the default form for the underlying
    Unicode value stored by the application. While many of these substitutions are
    one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup
    type 3). The manufacturer may choose to build two tables (one for each lookup
    type) or only one which uses lookup type 3 for all substitutions. As in any one-from-many
    substitution, alternates present in more than one face should be ordered consistently
    across a family, so that those alternates can work correctly when switching between
    family members. This feature should be ordered first in the font, to take precedence
    over other features.
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: "The application should indicate to the user which glyphs in the\
    \ user\u2019s document have alternative forms (i.e which are in the coverage table\
    \ for 'aalt'), and provide some means for the user to select an alternate glyph.\
    \ An application could display the forms sequentially in context, or present a\
    \ palette showing all the forms at once, or give the user a choice between these\
    \ approaches. The application may assume that the first glyph in a set is the\
    \ preferred form, so the font developer should order them accordingly. When only\
    \ one alternate exists, this feature could toggle directly between the alternate\
    \ and default forms."
abvf:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of Khmer script. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements. In particular,
    in a cluster in which the applicable split vowel is used, the application must
    insert the pre-base glyph into the correct location and then apply the above-base
    form feature to the split vowel.
  example: In Khmer script, U+17BE KHMER VOWEL SIGN OE must be split into a pre-base
    form and an above-base form. The above-base form of OE would be substituted to
    form the correct piece of the vowel that is displayed above the base consonant.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Above-base Forms
  function: "Substitutes the above-base form of a vowel. In particular, this feature\
    \ is used for certain \u201Csplit\u201D vowels in Khmer or other Brahmi-derived\
    \ scripts if the character has separate components that appear before and above\
    \ a consonant, but the Unicode character for the vowel does not have a decomposition\
    \ into separate characters for the two components."
  recommended implementation: This feature is used to map the default glyph for OE
    to a glyph for the above-base component (GSUB lookup type 1).
  registered by: Microsoft
  script/language sensitivity: Used for Khmer script. May also be used for other Brahmi-derived
    scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
abvm:
  application interface: In recommended usage, this feature triggers positioning of
    mark glyphs required for correct display of certain scripts. It should be applied
    in the appropriate contexts, as determined by script-specific processing requirements.
  example: In complex scripts like Devanagari (Indic), the Anuswar needs to be positioned
    above the base glyph. This base glyph can be a base consonant or conjunct. The
    base glyph and the presence/absence of other marks above the base glyph decides
    the location of the Anuswar, so that they do not overlap each other.
  feature interaction: Can be used to position default marks; or those that have been
    selected from a number of alternates based on contextual requirement using a feature
    like'abvs'.
  friendly name: Above-base Mark Positioning
  function: Positions marks above base glyphs.
  recommended implementation: The 'abvm' table provides positioning information (x,y)
    to enable mark positioning (GPOS lookup type 4, 5).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
abvs:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In complex scripts like Kannada (Indic), the vowel sign for the vowel I
    which a mark, is positioned above base consonants. This mark combines with the
    consonant Ga to form a ligature.
  feature interaction: None.
  friendly name: Above-base Substitutions
  function: "Substitutes a ligature for a base glyph and mark that\u2019s above it."
  recommended implementation: The 'abvs' feature is used to map consonant vowel sequences
    to corresponding ligature glyphs (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
afrc:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. The application
    applies the feature to a complete sequence of figures separated by slash (U+002F)
    or fraction slash (U+2044).'
  example: The user enters 3/4 in a recipe and get the threequarters nut fraction.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Alternative Fractions
  function: Replaces figures separated by a slash with an alternative form.
  recommended implementation: Sequences of glyphs for figures (digits) separated by
    a slash (U+002F) or fraction slash (U+2044) are mapped to a corresponding ligature
    glyph for the fraction (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
akhn:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Devanagari script, the form Kssa is considered an Akhand character (meaning
    unbreakable), and the sequence Ka, Halant, Ssa should always produce the ligature
    Kssa, irrespective of characters that precede/follow the above given sequence.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic scripts. The application is expected to process
    this feature and certain other features in an appropriate order to obtain the
    correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Akhand
  function: Preferentially substitutes default glyphs for a sequence of characters
    with a ligature. This substitution is done irrespective of any characters that
    may precede or follow the sequence.
  recommended implementation: This feature is used to map sequences that form Akhands
    to the corresponding ligature glyph (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
blwf:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In complex scripts like Oriya (Indic), the consonant Va has a below-base
    form that is used to generate conjuncts. Given a sequence Gha, Virama (Halant),
    Va; the below-base form of Va would be substituted to form the conjunct GhVa.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic and Indic-related scripts. For Indic scripts,
    the application is expected to process this feature and certain other features
    in an appropriate order to obtain the correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Below-base Forms
  function: Substitutes the below-base form of a consonant in conjuncts.
  recommended implementation: This feature is used to map a virama (halant) plus consonant
    sequence to the glyph for the below base form of the consonant (GSUB lookup type
    4).
  registered by: Microsoft
  script/language sensitivity: Used for many Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
blwm:
  application interface: In recommended usage, this feature triggers positioning of
    mark glyphs required for correct display of certain scripts. It should be applied
    in the appropriate contexts, as determined by script-specific processing requirements.
  example: In complex scripts like Gujarati (Indic), the vowel sign U needs to be
    positioned below base consonant/conjuncts that form the base glyph. This position
    can vary depending on the base glyph, as well as the presence/absence of other
    marks below the base glyph.
  feature interaction: Can be used to position default marks; or those that have been
    selected from a number of alternates based on contextual requirement using a feature
    like'blws'.
  friendly name: Below-base Mark Positioning
  function: Positions marks below base glyphs.
  recommended implementation: The 'blwm' table provides positioning information (x,y)
    to enable mark positioning (GPOS lookup type 4, 5).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
blws:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In the Malayalam script (Indic), the conjunct Kla, requires a ligature
    which is formed using the base glyph Ka and the below-base form of consonant La.
    This feature can also be used to substitute ligatures formed using base glyphs
    and below base matras in Indic scripts.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Below-base Substitutions
  function: Produces ligatures that comprise of base glyph and below-base forms.
  recommended implementation: The 'blws' feature is used to map consonant conjunct
    sequences or consonant vowel sequences to corresponding ligature glyphs (GSUB
    lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
c2pc:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note that applications
    may use this feature in an implementation to support petite-cap formatting applied
    to text with language-specific case-mapping logic. See''pcap''and''smcp''for additional
    information.'
  example: The user types UNICEF or NASA, applies 'c2pc' and gets petite cap text.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Also see'pcap'.
  friendly name: Petite Capitals From Capitals
  function: This feature turns capital characters into petite capitals. It is generally
    used for words which would otherwise be set in all caps, such as acronyms, but
    which are desired in petite-cap form to avoid disrupting the flow of text. See
    the'pcap'feature description for notes on the relationship of caps, smallcaps
    and petite caps.
  recommended implementation: The 'c2pc' table maps capital glyphs to the corresponding
    petite cap forms (GSUB lookup type 1).
  registered by: Tiro Typeworks / Emigre
  script/language sensitivity: Used for bicameral scripts (i.e. those with case differences),
    such as Latin, Greek, Cyrillic, and Armenian.
  ui suggestion: This feature should be off by default.
c2sc:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note that applications
    may use this feature in an implementation to support small-cap formatting applied
    to text with language-specific case-mapping logic. See''smcp''for additional information.'
  example: The user types UNICEF or SCUBA, applies 'c2sc' and gets small cap text.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Also see'smcp'.
  friendly name: Small Capitals From Capitals
  function: This feature turns capital characters into small capitals. It is generally
    used for words which would otherwise be set in all caps, such as acronyms, but
    which are desired in small-cap form to avoid disrupting the flow of text.
  recommended implementation: The 'c2sc' table maps capital glyphs to the corresponding
    small-cap forms (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used for bicameral scripts (i.e. those with case differences),
    such as Latin, Greek, Cyrillic, and Armenian.
  ui suggestion: This feature should be off by default.
calt:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: In Caflisch Script, o is replaced by o.alt2 when followed by an ascending
    letterform.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Contextual Alternates
  function: In specified situations, replaces default glyphs with alternate forms
    which provide better joining behavior. Used in script typefaces which are designed
    to have some or all of their glyphs join.
  recommended implementation: The 'calt' table specifies the context in which each
    substitution occurs, and maps one or more default glyphs to replacement glyphs
    (GSUB lookup type 6).
  registered by: Adobe
  script/language sensitivity: Can be used with scripts that have optional, cursive
    styles.
  ui suggestion: This feature should be active by default.
case:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user selects a block of text and applies this feature. The dashes,
    bracketing characters, guillemet quotes and the like shift up to match the capitals,
    and oldstyle figures change to lining figures.
  feature interaction: This feature overrides the results of other features affecting
    the figures (e.g.'onum'and'tnum').
  friendly name: Case-Sensitive Forms
  function: Shifts various punctuation marks up to a position that works better with
    all-capital sequences or sets of lining figures; also changes oldstyle figures
    to lining figures. By default, glyphs in a text face are designed to work with
    lowercase characters. Some characters should be shifted vertically to fit the
    higher visual center of all-capital or lining text. Also, lining figures are the
    same height (or close to it) as capitals, and fit much better with all-capital
    text.
  recommended implementation: The font may implement this change by substituting different
    glyphs (GSUB lookup type 1) or by repositioning the original glyphs (GPOS lookup
    type 1, XPlacement and YPlacement).
  registered by: Adobe
  script/language sensitivity: Applies only to European scripts; particularly prominent
    in Spanish-language setting.
  ui suggestion: It would be good to apply this feature (or turn it off) automatically
    when the user changes case on a sequence of more than one character. Applications
    could also detect words consisting only of capitals, and apply this feature based
    on user preference settings.
ccmp:
  application interface: This feature should always be applied.
  example: 'In Syriac, the character 0x0732 is a combining mark that has a dot above
    AND a dot below the base character. To avoid multiple glyph variants to fit all
    base glyphs, the default glyph for the character is decomposed into two glyphs:
    a dot above and a dot below. These two glyphs can then be correctly placed using
    GPOS. In Arabic it might be preferred to combine the shadda with fatha (0x0651,
    0x064E) into a ligature before processing shapes. This allows the font vendor
    to do special handling of the mark combination when doing further processing without
    requiring larger contextual rules.'
  feature interaction: This feature needs to be implemented prior to any other feature.
  friendly name: Glyph Composition/Decomposition
  function: To minimize the number of glyph alternates, it is sometimes desirable
    to decompose the default glyph for a character into two or more glyphs. Additionally,
    it may be preferable to compose default glyphs for two or more characters into
    a single glyph for better glyph processing. This feature permits such composition/decomposition.
    The feature should be processed as the first feature processed, and should be
    processed only when it is called.
  recommended implementation: Glyphs for multiple characters are mapped to a single
    glyph (GSUB lookup type 4), or the glyph for a character is mapped to a sequence
    of glyphs (GSUB lookup type 2).
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: Control of the feature should not generally be exposed to the user.
cfar:
  application interface: In recommended usage, this feature triggers substitutions
    that are required for correct display of Khmer script. It should be applied in
    the appropriate contexts, as determined by script-specific processing requirements.
    In particular, the application is expected to apply this feature if a syllable
    contains a Coeng Ra followed by other conjoining consonants or vowels.
  example: In the Khmer script, Coeng Ro is denoted by a pre-base conjoining form,
    and Coeng Yo is denoted by a post-base conjoining form, but in both cases part
    of the form wraps under the base. The consonant cluster TRYo is denoted with an
    alternate form of Coeng Ya that descends lower so that it does not collide below
    the base with the Coeng Ro.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Khmer script. Other discretionary features for optional
    typographic effects may also be applied. Lookups for such discretionary features
    should be processed after lookups for this feature have been processed.
  friendly name: Conjunct Form After Ro
  function: "Substitutes alternate below-base or post-base forms in Khmer script when\
    \ occurring after conjoined Ro (\u201CCoeng Ra\u201D)."
  recommended implementation: The 'cfar' table maps below-base or post-base conjoining
    form into an alternate form (GSUB lookup type 1).
  registered by: Microsoft
  script/language sensitivity: Used for Khmer script.
  ui suggestion: Control of the feature should not generally be exposed to the user.
chws:
  application interface: If a layout engine supports advanced layout for CJK text
    as described inCLREQ,JLREQorKLREQ, this feature should not be used. Otherwise,
    this feature should always be applied in horizontal layout of CJK text.
  example: "When FULLWIDTH RIGHT PARENTHESIS (U+FF09; \u201C\uFF09\u201D) is followed\
    \ by IDEOGRAPHIC COMMA (U+3001; \u201C\u3001\u201D), the former is re-spaced to\
    \ remove half-em of width between them."
  feature interaction: This feature is mutually exclusive with all other glyph-width
    features (e.g.,'fwid','halt','hwid','palt','pwid','qwid','twid'), which should
    be turned off when this feature is applied. It deactivates the'kern'feature. See
    also'vchw'.
  friendly name: Contextual Half-width Spacing
  function: Contextually re-spaces glyphs designed to be set on full-em widths, fitting
    them onto individual half-em horizontal widths, to approximate more sophisticated
    text layout, such as what is described inRequirements for Japanese Text Layout
    (JLREQ)or similar CJK text-layout specifications that expect half-width forms
    of characters whose default glyphs are full-width.* This feature differs from'halt'in
    that the re-spacing is contextual. This feature may be invoked to get better fit
    for punctuation or symbol glyphs without disrupting the monospaced alignment,
    such as for UIs or terminal apps.
  recommended implementation: The font stores a set of adjustments for pairs of glyphs
    (GPOS lookup type 2 or 8, , XPlacement, XAdvance, YPlacement, and YAdvance). These
    may be stored as one or more tables matching left and right classes, and/or as
    individual pairs. Additional adjustments may be provided for larger sets of glyphs
    (e.g. triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular
    combinations.
  registered by: Adobe/W3C
  script/language sensitivity: Used mostly in CJKV fonts.
  ui suggestion: This feature should not be used in combination with a layout engine
    that independently provides advanced layout as described inCLREQ,JLREQorKLREQ.
    For applications that provide such advanced layout, it may appropriate not to
    expose control of this feature to users. In applications that do not support such
    advanced layout, this feature should be enabled by default for horizontal layout
    of CJK text.
cjct:
  application interface: In recommended usage, this feature triggers substitutions
    that are required for correct display of the given script. It should be applied
    in the appropriate contexts, as determined by script-specific processing requirements.
  example: In Hindi (Devanagari script), the consonant cluster DGa is denoted with
    a conjunct ligature form.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic scripts. The application is expected to process
    this feature and certain other features in an appropriate order to obtain the
    correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Conjunct Forms
  function: Produces conjunct forms of consonants in Indic scripts. This is similar
    to the Akhands feature, but is applied at a different sequential point in the
    process of shaping an Indic syllable.
  recommended implementation: A glyph for a consonant conjunct form is mapped from
    a sequence of two or more glyphs for consonants separated by virama (halant) (e.g.,
    C H C, or C H C H C, etc.); or from sequences of glyphs involving simpler consonant
    conjuncts or conjoining consonant forms resulting from earlier substitutions from
    default consonant + virama + consonant (+ etc.) sequences (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Devanagari and other Indic or Brahmi-derived
    scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
clig:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. When processing
    lookups, context before or after the glyph sequence to which the feature is applied
    must be considered. Note: This may include a change of character code. Besides
    the original character code, the application should store the code for the new
    character.'
  example: The glyph for ft replaces the sequence f t in Bickham Script, except when
    preceded by an ascending letter.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'dlig'.
  friendly name: Contextual Ligatures
  function: Replaces a sequence of glyphs with a single glyph which is preferred for
    typographic purposes. Unlike other ligature features, 'clig' specifies the context
    in which the ligature is recommended. This capability is important in some script
    designs and for swash ligatures.
  recommended implementation: The 'clig' table maps sequences of glyphs to corresponding
    ligatures in a chained context (GSUB lookup type 8). Ligatures with more components
    must be stored ahead of those with fewer components in order to be found. The
    set of contextual ligatures will vary by design and script.
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be active by default.
cpct:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a Chinese font to get centered punctuation
    in case it is desired. Examples include U+3001 and U+3002, including their vertical
    variants, specifically U+FE11 and U+FE12, respectively.
  feature interaction: This feature is mutually exclusive with all other glyph-width
    features (e.g.'tnum','fwid','hwid','halt','palt','twid'), which should be turned
    off when it is applied.
  friendly name: Centered CJK Punctuation
  function: Centers specific punctuation marks for those fonts that do not include
    centered and non-centered forms.
  recommended implementation: The font specifies X- and Y-axis adjustments for a small
    number of full-width glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement
    and YAdvance).
  registered by: Adobe
  script/language sensitivity: Used primarily in Chinese fonts.
  ui suggestion: This feature would be off by default.
cpsp:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. The application
    may rely on the user to apply this feature (e.g., by selecting text for a change
    to all-caps) or apply its own heuristics for recognizing words consisting of capitals.'
  example: The user sets a title in all caps, and the Capital Spacing feature opens
    the spacing.
  feature interaction: May be used in addition to any other feature (note specifically
    that this feature is additive with other GPOS features like'kern').
  friendly name: Capital Spacing
  function: Globally adjusts inter-glyph spacing for all-capital text. Most typefaces
    contain capitals and lowercase characters, and the capitals are positioned to
    work with the lowercase. When capitals are used for words, they need more space
    between them for legibility and esthetics. This feature would not apply to monospaced
    designs. Of course the user may want to override this behavior in order to do
    more pronounced letterspacing for esthetic reasons.
  recommended implementation: The 'cpsp' table stores alternate advance widths for
    the capital letters covered, generally increasing them by a uniform percentage
    (GPOS lookup type 1, XPlacement and XAdvance).
  registered by: Adobe
  script/language sensitivity: Should not be used in connecting scripts (e.g. most
    Arabic).
  ui suggestion: This feature should be on by default. Applications may want to allow
    the user to respecify the percentage to fit individual tastes and functions.
cswh:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If the font is
    implemented using an alternate substitution lookup, the application must provide
    a means for the user to select the one desired.'
  example: "The user sets the word \u201CHOLIDAY\u201D in Poetica with this feature\
    \ active, and is presented with a choice of three alternate forms appropriate\
    \ for an initial H and one alternate appropriate for a medial L."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'swsh'and'init'.
  friendly name: Contextual Swash
  function: This feature replaces default character glyphs with corresponding swash
    glyphs in a specified context. Note that there may be more than one swash alternate
    for a given character.
  recommended implementation: The 'cswh' table maps GIDs for default forms to those
    for one or more corresponding swash forms in a chained context, which may require
    a selection from a set (GSUB lookup type 8). If several styles of swash are present
    across the font, the set of forms for each character should be ordered consistently.
  registered by: Adobe
  script/language sensitivity: Not used for ideographic scripts.
  ui suggestion: This feature should be inactive by default. When implemented in the
    font using an alternate substitution lookup, an application could display the
    forms sequentially in context, or present a palette showing all the forms at once,
    or give the user a choice between these approaches. The application may assume
    that the first glyph in a set is the preferred form, so the font developer should
    order them accordingly.
curs:
  application interface: In recommended usage, this feature triggers positioning adjustments
    that are required for correct display of fonts that implement cursive joining
    behavior. It should always be applied.
  example: In Arabic, the Meem followed by a Reh are cursively positioned by overlapping
    the exit point of the Meem on the entry point of the Reh.
  feature interaction: None.
  friendly name: Cursive Positioning
  function: This feature is used to position adjacent glyphs for cursive connections.
  recommended implementation: Lookup tables for the 'curs' feature provide entry and
    exit points (x,y) for glyphs to be cursively positioned (GPOS lookup type 3).
  registered by: Microsoft
  script/language sensitivity: Used primarily for Arabic and other cursively-connecting
    scripts, and also any other scripts for which cursive styles can optionally be
    used.
  ui suggestion: Control of this feature should not normally be exposed to the user.
cv01:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria. The application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format ''cv01'' to ''cv99'', and for presenting the user
    with an appropriate selection mechanism. The application is also responsible for
    interpreting any feature parameter tables (if the application developer wishes
    to use that data) and presenting referenced strings in user interface. If the
    font is implemented using an alternate substitution lookup, the application may
    use an index parameter as an index into the array of mapped glyph IDs.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after a 'cvXX' feature
    has been applied, the user may wish to apply other typographic features, e.g.
    'smcp'; font developers are responsible for ordering substitution lookups to obtain
    desired user experience. If it is to be used in conjunction with a complex script
    that requires obligatory substitution of ligatures or contextual forms, this feature
    should be applied before features for obligatory script behaviors.
  friendly name: "Character Variant 1 \u2013 Character Variant 99"
  function: A font may have stylistic-variant glyphs for one or more characters where
    the variations for one character are not systematically related to those for other
    characters. Or, a variation may exist for a character and its casing pair (or
    related pre-composed characters), but not be applicable to other unrelated characters.
    In some usage scenarios, it may be necessary to provide the application with control
    over glyph variations for different Unicode characters individually.
  recommended implementation: A 'cvXX' lookup table maps the GID for the default form
    of a character to the GIDs for stylistic alternatives of that character. Each
    'cvXX' feature uses alternate (GSUB lookup type 3) substitutions. (If there is
    only one variant for a character, a single-substitution lookup, type 1, can also
    be used.). Within each 'cvXX' feature, the number of variants should be identical
    for all glyphs.
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. An application can display
    glyph variants for a given character as a glyph palette in the user interface.
    If a Feature Parameters table is provided, the feature UI label or the named parameter
    UI labels (if provided) can be presented in the application user interface; or
    the sample-text string (if provided) can be presented in the application user
    interface.
dist:
  application interface: In recommended usage, this feature triggers positioning adjustments
    that are required for correct display of the given script. It should be applied
    in the appropriate contexts, as determined by script-specific processing requirements.
  example: In Telugu script, adjust the placement of subjoined consonant forms to
    avoid collision with other glyphs.
  feature interaction: This and other certain other features, such as'kern', are typically
    implemented using single or pair adjustment positioning lookups. Note that, if
    multiple lookups are applied to a glyph, the positioning adjustments will be additive.
    The glyphs affected by the 'dist' and 'kern' features should be distinct unless
    it is intended that their effects can be combined.
  friendly name: Distances
  function: Provides a means to control distance between glyphs.
  recommended implementation: The font provides distances by which a glyph needs to
    move towards or away from another glyph (GPOS lookup type 1, type 2, or contextual
    lookups that reference type 1 or type 2 lookups).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
dlig:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. When processing
    lookups, context before or after the glyph sequence to which the feature is applied
    must be considered. Besides the original character code, the application should
    store the code for the new character.'
  example: "The glyph for ct replaces the sequence of glyphs c t, or U+322E (Kanji\
    \ ligature for \u201CFriday\u201D) replaces the sequence U+91D1 U+66DC U+65E5."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'clig'.
  friendly name: Discretionary Ligatures
  function: "Replaces a sequence of glyphs with a single glyph which is preferred\
    \ for typographic purposes. This feature covers those ligatures which may be used\
    \ for special effect, at the user\u2019s preference."
  recommended implementation: The 'dlig' table maps sequences of glyphs to corresponding
    ligatures (GSUB lookup type 4). Ligatures with more components must be stored
    ahead of those with fewer components in order to be found. The set of discretionary
    ligatures will vary by design and script.
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
dnom:
  application interface: "In recommended usage, this feature is applied automatically\
    \ as part of the application\u2019s implementation for the 'frac' feature. See\
    \ the'frac'for details."
  example: In the string 11/17 selected by the user, the application turns the 17
    into denominators when the user applies the fraction feature ('frac').
  feature interaction: This feature supports'frac'. It may be used in combination
    with other substitution (GSUB) features, whose results it may override.
  friendly name: Denominators
  function: Replaces selected figures which follow a slash with denominator figures.
  recommended implementation: Glyphs for figures (digits) and related characters (grouping
    or decimal separators) are mapped to corresponding numerator glyphs in the font
    (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: In recommended usage, this feature is applied to sequences automatically
    by applications when the 'frac' feature is used, and direct user control is not
    required.
dtls:
  application interface: In recommended usage, this feature is used to trigger substitutions
    that are required for correct display of math formula. It should be applied in
    appropriate contexts under the control of a math layout handler. See the'MATH'
    tablechapter for additional information.
  example: When adding a tilde to an i, the dotless form is substituted before attaching
    the tilde accent on top of it.
  feature interaction: This feature is applied to individual glyphs during layout
    of math formula.
  friendly name: Dotless Forms
  function: This feature provides dotless forms for Math Alphanumeric characters,
    such as U+1D422 MATHEMATICAL BOLD SMALL I, U+1D423 MATHEMATICAL BOLD SMALL J,
    U+1D456 U+MATHEMATICAL ITALIC SMALL I, U+1D457 MATHEMATICAL ITALIC SMALL J, and
    so on. The dotless forms are to be used as base forms for placing mathematical
    accents over them.
  recommended implementation: Single substitution (GSUB lookup type 1), for glyphs
    of all dotted characters.
  registered by: Microsoft
  script/language sensitivity: Used for math formula layout.
  ui suggestion: Control of the feature should not generally be exposed to the user.
expt:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This is
    a change of character code. Besides the original character code, the application
    should store the code for the new character.'
  example: The user would invoke this feature to replace kanji character U+5516 with
    U+555E.
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'palt','vpal','vert'and'vrt2'features,\
    \ which may be used in addition."
  friendly name: Expert Forms
  function: Like theJIS78 Formsfeature, this feature replaces standard forms in Japanese
    fonts with corresponding forms preferred by typographers. Although most of the
    JIS78 substitutions are included, the expert substitution goes on to handle many
    more characters.
  recommended implementation: The 'expt' table maps many default (JIS90) GIDs to corresponding
    alternates (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Applies only to Japanese.
  ui suggestion: Applications may choose to have this feature active or inactive by
    default, depending on their target markets.
falt:
  application interface: In recommended usage, this feature is applied automatically
    to final glyphs of lines when text is justified. The feature may affect the length
    of lines, which should be taken into consideration by line-breaking and justification
    algorithms.
  example: In the Arabic script, providing alternate forms for line final glyphs would
    result in better justification. eg. replacing a long tailed Yeh-with-tail with
    one that has a slightly longer/shorter tail.
  feature interaction: Would need to be applied last, only after all other features
    have been applied to the run.
  friendly name: Final Glyph on Line Alternates
  function: Replaces line final glyphs with alternate forms specifically designed
    for this purpose (they would have less or more advance width as need may be),
    to help justification of text.
  recommended implementation: A 'falt' lookup table maps line final glyphs (in isolated
    or final forms) to their corresponding alternate forms (GSUB lookup type 1).
  registered by: Microsoft
  script/language sensitivity: Can be used in any cursive script.
  ui suggestion: "This feature could be made active or inactive by default, at the\
    \ user\u2019s preference."
fin2:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of Syriac text. The application should always apply
    the feature to the Alaph glyph when the preceding base character is non-joining
    and is a character other than Dalath, Rish, or dotless Dalath-Rish.
  example: When an Alaph is preceded by a He, the Alaph would be replaced by an appropriate
    form.This feature is used only for the Syriac script alaph character.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'init'and'fina'.
  friendly name: 'Terminal Form #2'
  function: Used to replace the Alaph glyph at the end of Syriac words with its appropriate
    form, when the preceding base character cannot be joined to, and that preceding
    base character is not a Dalath, Rish, or dotless Dalath-Rish.
  recommended implementation: A 'fin2' lookup table maps default alphabetic forms
    to corresponding final forms (GSUB lookup type 1).
  registered by: Microsoft
  script/language sensitivity: Used only with the Syriac script.
  ui suggestion: Control of the feature should not generally be exposed to the user.
fin3:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of Syriac text. The application should always apply
    the feature to the Alaph glyph when at the end of Syriac words if the preceding
    base character is Dalath, Rish, or dotless Dalath-Rish.
  example: When an Alaph is preceded by a Dalath, the Alaph would be replaced by an
    appropriate form.This feature is used only for the Syriac script alaph character.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'init'and'fina'.
  friendly name: 'Terminal Form #3'
  function: Used to replace Alaph glyphs at the end of Syriac words when the preceding
    base character is a Dalath, Rish, or dotless Dalath-Rish.
  recommended implementation: A 'fin3' lookup table maps default alphabetic forms
    to corresponding final forms (GSUB lookup type 5).
  registered by: Microsoft
  script/language sensitivity: Used only with the Syriac script.
  ui suggestion: Control of the feature should not generally be exposed to the user.
fina:
  application interface: "In recommended usage, this feature triggers substitutions\
    \ that are required for correct display of cursively-connecting scripts. It should\
    \ be applied in the appropriate contexts, as determined by script-specific processing\
    \ requirements. The application is responsible for parsing character strings and\
    \ identifying which of the joining-related features \u2014 initial forms ('init'),\
    \ medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol')\
    \ \u2014 to apply to which GIDs, based on character Joining_Type properties. Additional\
    \ factors, such as the presence of control characters, may also be considered."
  example: "In an Arabic-script font, the application would apply the 'fina' feature\
    \ to the letter ARABIC LETTER WAW (U+0648 \u201C\u0648\u201D) when it follows\
    \ a left-joining character, thereby replacing the default \u201C\u0648\u201D glyph\
    \ with its right-joining, final form."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'init','isol'and'medi'.
  friendly name: Terminal Forms
  function: 'Replaces glyphs for characters that have applicable joining properties
    with an alternate form when occurring in a final context. This applies to characters
    that have one of the following Unicode Joining_Type property values:'
  note: This feature description was significantly revised in 2016.
  recommended implementation: The 'fina' feature is used to map default forms to corresponding
    single-joining, final forms. This will usually be implemented using a single substitution
    (type 1) GSUB lookup, though contextual substitution GSUB lookups (types 5, 6
    or 8) may also be appropriate.
  registered by: Microsoft/Adobe
  script/language sensitivity: "Can be used in any script with joining behavior \u2014\
    \ that is, the scripts for which Joining_Type properties are given explicitly\
    \ in ArabicShaping.txt."
  ui suggestion: Control of the feature should not generally be exposed to the user.
flac:
  application interface: In recommended usage, this feature is used to trigger substitutions
    that are required for correct display of math formula. It should be applied in
    the appropriate contexts, as determined by math layout handler. See the'MATH'
    tablechapter for additional information.
  example: Depending on the font parameters, a lowercase a with tilde may used in
    default form and an uppercase A with tilde may use the flattened form
  feature interaction: This feature is applied to individual glyphs during layout
    of math formula.
  friendly name: Flattened ascent forms
  function: This feature provides flattened forms of accents to be used over high-rise
    bases such as capitals. This feature should only change the shape of the accent
    and should not move it in the vertical or horizontal direction. Moving of the
    accents is done by the math layout engine. Accents are flattened by the Math engine
    if their base is higher than MATH.MathConstants. FlattenedAccentBaseHeight.
  recommended implementation: Single substitution, replacing ascent glyph with its
    flattened form. SeeMATHtable specification for details.
  registered by: Microsoft
  script/language sensitivity: Used for math formula layout.
  ui suggestion: Control of the feature should not generally be exposed to the user.
frac:
  application interface: 'The application evaluates the sequence of glyphs for the
    span of characters over which this feature has been applied by the user. If an
    associated lookup subtable matches the entire glyph sequence, the substitutions
    described in that lookup are applied to the glyph sequence directly. If no lookup
    subtable is found that matches the entire sequence, then the application does
    the following:'
  example: The user enters 3/4 in a recipe and gets the threequarters fraction.
  feature interaction: This feature may require the application to apply the'numr'and'dnom'features.
    It may be used in combination with other substitution (GSUB) features, whose results
    it may override.
  friendly name: Fractions
  function: "Replaces figures (digits) separated by a slash (U+002F) with \u201Ccommon\u201D\
    \ (diagonal) fractions."
  recommended implementation: Glyphs for figures (digits) separated by a slash (U+002F)
    are mapped to variant forms (GSUB lookup type 1, or contextual substitutions that
    reference type 1 lookups), or sequences of such glyphs are mapped to ligature
    fraction glyphs (GSUB lookup type 4).
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
fwid:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a Japanese font to get full monospaced
    Latin glyphs instead of the corresponding proportionally-spaced versions.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'tnum','halt','hwid','palt','pwid','qwid'and'twid'), which should\
    \ be turned off when it\u2019s applied. It deactivates the'kern'feature."
  friendly name: Full Widths
  function: "Replaces glyphs set on other widths with glyphs set on full (usually\
    \ em) widths. In a CJKV font, this may include \u201Clower ASCII\u201D Latin characters\
    \ and various symbols. In a European font, this feature replaces proportionally-spaced\
    \ glyphs with monospaced glyphs, which are generally set on widths of 0.6 em."
  recommended implementation: The font may contain alternate glyphs designed to be
    set on full widths (GSUB lookup type 1), or it may specify alternate (full-width)
    metrics for the proportional glyphs (GPOS lookup type 1, XPlacement and XAdvance).
  registered by: Adobe
  script/language sensitivity: Can be used for any script which can use monospaced
    forms.
  ui suggestion: This feature would normally be off by default.
half:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Hindi (Devanagari script), the conjunct KKa, obtained by doubling the
    Ka, is denoted with a half form of Ka followed by the full form.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic scripts. The application is expected to process
    this feature and certain other features in an appropriate order to obtain the
    correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Half Forms
  function: Produces the half forms of consonants in Indic scripts.
  recommended implementation: A 'half' lookup table maps the sequence of a consonant
    followed by a virama (halant) to its half form (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Devanagari and other Indic or Brahmi-derived
    scripts that have pre-base consonant half forms.
  ui suggestion: Control of the feature should not generally be exposed to the user.
haln:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Sanskrit (Devanagari script), syllable final consonants are frequently
    required in their halant form.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Halant Forms
  function: Produces the halant forms of consonants in Indic scripts (that is, precomposed
    glyphs for consonant with the halant).
  recommended implementation: A 'haln' lookup table maps the sequence of a consonant
    followed by a virama (halant) to its halant form (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
halt:
  application interface: If a layout engine supports advanced layout for CJKV text
    as described inCLREQ,JLREQorKLREQ, this feature should not be used. Otherwise,
    this feature should be enabled in horizontal layout to all CJKV text or selectively
    to particular characters that require special treatment in CJKV text layout, such
    as brackets, punctuation, and quotation marks.
  example: The user may invoke this feature in a CJKV font to get better fit for punctuation
    or symbol glyphs without disrupting the monospaced alignment.
  feature interaction: This feature is mutually exclusive with all other glyph-height
    features (e.g.,'fwid','hwid','palt','tnum','twid'), which should be turned off
    when this feature is applied. It deactivates the'kern'feature. See also'vhal'.
  friendly name: Alternate Half Widths
  function: Re-spaces glyphs designed to be set on full-em widths, fitting them onto
    half-em widths, to approximate more sophisticated text layout, such as what is
    described inRequirements for Japanese Text Layout (JLREQ)or similar CJKV text-layout
    specifications that expect half-width forms of characters whose default glyphs
    are full-width.* This feature differs from 'hwid' in that it is not used to substitute
    new glyphs.
  recommended implementation: The font specifies alternate metrics for the full-width
    glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).
  registered by: Adobe
  script/language sensitivity: Used only in CJKV fonts.
  ui suggestion: This feature should not be used in combination with a layout engine
    that independently provides advanced layout as described inCLREQ,JLREQorKLREQ.
    For applications that provide such advanced layout, it may appropriate not to
    expose control of this feature to users. In applications that do not support such
    advanced layout, this feature should be enabled by default for horizontal layout
    of CJK text.
hist:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user applies this feature in Adobe Jenson to get the archaic forms
    of M, Q and Z.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Historical Forms
  function: "Some letterforms were in common use in the past, but appear anachronistic\
    \ today. The best-known example is the long form of s; others would include the\
    \ old Fraktur k. Some fonts include the historical forms as alternates, so they\
    \ can be used for a \u201Cperiod\u201D effect. This feature replaces the default\
    \ (current) forms with the historical alternates. While some ligatures are also\
    \ used for historical effect, this feature deals only with single characters."
  recommended implementation: The 'hist' table maps default forms to corresponding
    historical forms (GSUB lookup type 1).
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
hkna:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: Standard full-width kana (hiragana and katakana) are replaced by forms
    that are designed for horizontal use.
  feature interaction: This feature may be used with the'kern'feature. Since it is
    for horizontal use, features applying to vertical behaviors (e.g.'vkna','vert','vrt2'or'vkrn')
    do not apply.
  friendly name: Horizontal Kana Alternates
  function: Replaces standard kana with forms that have been specially designed for
    only horizontal writing. This is a typographic optimization for improved fit and
    more even color. Also see'vkna'.
  recommended implementation: A 'hkna' lookup table maps the standard full-width forms
    to the corresponding special horizontal forms (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used only in fonts that support kana (hiragana and
    katakana).
  ui suggestion: This feature would be off by default.
hlig:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: 'The user applies this feature using Palatino Linotype, and historic ligatures
    are formed for all long s forms, including: long s+t, long s+b, long s+h, long
    s+k, and several others.'
  feature interaction: This feature overrides the results of all other features.
  friendly name: Historical Ligatures
  function: "Some ligatures were in common use in the past, but appear anachronistic\
    \ today. Some fonts include the historical forms as alternates, so they can be\
    \ used for a \u201Cperiod\u201D effect. This feature replaces the default (current)\
    \ forms with the historical alternates."
  recommended implementation: Sequences of glyphs for certain character combinations
    are mapped to corresponding historical ligature glyphs.
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
hngl:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If the font is
    implemented using an alternate substitution lookup, the application must provide
    a means for the user to select the one desired. Note: This is a change of semantic
    value. Besides the original character codes (when entered as hanja), the application
    should store the code for the new character.'
  example: The user may call this feature to get U+AC00 from U+4F3D.
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'palt','vert'and'vrt2'may\
    \ be used in addition."
  friendly name: Hangul
  function: Replaces hanja (Chinese-style) Korean characters with the corresponding
    hangul (syllabic) characters. This effectively reverses the standard input method,
    in which hangul are entered and replaced by hanja. Many of these substitutions
    are one-to-one (GSUB lookup type 1), but hanja substitution often requires the
    user to choose from several possible hangul characters (GSUB lookup type 3).
  recommended implementation: Glyphs for hanja characters are mapped to corresponding
    glyphs for Hangul syllables (GSUB lookup type 1); or default glyphs for hanja
    characters are mapped to two or more corresponding alternate glyphs for Hangul
    syllables (GSUB lookup type 3). As in any one-from-many substitution, alternates
    should be ordered consistently across a family, so that those alternates can work
    correctly when switching between family members.
  registered by: Adobe
  script/language sensitivity: Korean only.
  ui suggestion: "This feature should be inactive by default. The application may\
    \ note the user\u2019s choice when selecting from multiple hangul, and offer it\
    \ as a default the next time the source hanja character is encountered. In the\
    \ absence of such prior information, the application may assume that the first\
    \ hangul in a set is the preferred form, so the font developer should order them\
    \ accordingly."
hojo:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The glyphis replaced by the glyph.
  feature interaction: This feature is exclusive with'jp78','jp83','jp90','nlck'and
    similar features. It can be combined with the'palt','vpal','vert'and'vrt2'features.
  friendly name: Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms)
  function: "The JIS X 0212-1990 (aka, \u201CHojo Kanji\u201D) and JIS X 0213:2004\
    \ character sets overlap significantly. In some cases their prototypical glyphs\
    \ differ. When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004\
    \ (such as those supporting the Adobe-Japan 1-6 character collection), it is recommended\
    \ that JIS X 0213:2004 forms be preferred as the encoded form. The 'hojo' feature\
    \ is used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004\
    \ form is encoded."
  recommended implementation: One-for-one substitution of JIS X 0213:2004 glyphs by
    the corresponding JIS X 0212-1990 glyph.
  registered by: Adobe
  script/language sensitivity: Used only with Kanji characters in Japanese.
  ui suggestion: This feature should be off by default.
hwid:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may replace a proportional Latin glyph with the same character
    set on a half-em width.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'tnum','fwid','halt','qwid'and'twid'), which should be turned\
    \ off when it\u2019s applied. It deactivates the'kern'feature."
  friendly name: Half Widths
  function: Replaces glyphs on proportional widths, or fixed widths other than half
    an em, with glyphs on half-em (en) widths. Many CJKV fonts have glyphs which are
    set on multiple widths; this feature selects the half-em version. There are various
    contexts in which this is the preferred behavior, including compatibility with
    older desktop documents.
  recommended implementation: The font may contain alternate glyphs designed to be
    set on half-em widths (GSUB lookup type 1), or it may specify alternate metrics
    for the original glyphs (GPOS lookup type 1, XPlacement and XAdvance) which adjust
    their spacing to fit in half-em widths.
  registered by: Adobe
  script/language sensitivity: Generally used only in CJKV fonts.
  ui suggestion: This feature would normally be off by default.
init:
  application interface: "In recommended usage, this feature triggers substitutions\
    \ that are required for correct display of cursively-connecting scripts. It should\
    \ be applied in the appropriate contexts, as determined by script-specific processing\
    \ requirements. The application is responsible for parsing character strings and\
    \ identifying which of the joining-related features \u2014 initial forms ('init'),\
    \ medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol')\
    \ \u2014 to apply to which GIDs, based on character Joining_Type properties. Additional\
    \ factors, such as the presence of control characters, may also be considered."
  example: "In an Arabic-script font, the application would apply the 'init' feature\
    \ to the letter ARABIC LETTER SEEN (U+0633 \u201C\u0633\u201D) when it precedes\
    \ a right-joining character, thereby replacing the default \u201C\u0633\u201D\
    \ glyph with its left-joining, initial form."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'fina','isol'and'medi'.
  friendly name: Initial Forms
  function: 'Replaces glyphs for characters that have applicable joining properties
    with an alternate form when occurring in an initial context. This applies to characters
    that have one of the following Unicode Joining_Type property values:'
  note: This feature description was significantly revised in 2016.
  recommended implementation: The 'init' feature is used to map default forms to corresponding
    single-joining, inital forms. This will usually be implemented using a single
    substitution (type 1) GSUB lookup, though contextual substitution GSUB lookups
    (types 5, 6 or 8) may also be appropriate.
  registered by: Microsoft/Adobe
  script/language sensitivity: "Can be used in any script with joining behavior \u2014\
    \ that is, the scripts for which Joining_Type properties are given explicitly\
    \ in ArabicShaping.txt."
  ui suggestion: Control of the feature should not generally be exposed to the user.
isol:
  application interface: "In recommended usage, this feature triggers substitutions\
    \ that are required for correct display of cursively-connecting scripts. It should\
    \ be applied in the appropriate contexts, as determined by script-specific processing\
    \ requirements. The application is responsible for parsing character strings and\
    \ identifying which of the joining-related features \u2014 initial forms ('init'),\
    \ medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol')\
    \ \u2014 to apply to which GIDs, based on character Joining_Type properties. Additional\
    \ factors, such as the presence of control characters, may also be considered."
  example: "In an Arabic-script font, the application would apply the 'isol' feature\
    \ to the letter ARABIC LETTER HEH (U+0647 \u201C\u0647\u201D) when not adjacent\
    \ to any joining character, thereby potentially replacing the default \u201C\u0647\
    \u201D glyph with a special, isolated form (likely, a contextual and language-specific\
    \ substitution, substituting one isolated form for another)."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'fina','init'and'medi'.
  friendly name: Isolated Forms
  function: 'Replaces glyphs for characters that have applicable joining properties
    with an alternate form when occurring in a isolate (non-joining) context. This
    applies to characters that have one of the following Unicode Joining_Type property
    values:'
  note: This feature description was significantly revised in 2016.
  recommended implementation: The 'isol' feature is used to map default forms to alternate
    non-joining, isolate forms. This will usually be implemented using a single substitution
    (type 1) GSUB lookup or, often, a contextual substitution GSUB lookup (types 5,
    6 or 8).
  registered by: Microsoft
  script/language sensitivity: "Can be used in any script with joining behavior \u2014\
    \ that is, the scripts for which Joining_Type properties are given explicitly\
    \ in ArabicShaping.txt."
  ui suggestion: Control of the feature should not generally be exposed to the user.
ital:
  application interface: This feature is applied automatically by the application
    based on italic formatting indicated in document markup, user control or other
    means.
  example: The user would apply this feature to replace B withB.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. In CJKV fonts it should activate
    the'kern'feature (which would be on anyway in other scripts).
  friendly name: Italics
  function: "Some fonts (such as Adobe\u2019s Pro Japanese fonts) will have both Roman\
    \ and Italic forms of some characters in a single font. This feature replaces\
    \ the Roman glyphs with the corresponding Italic glyphs."
  recommended implementation: The 'ital' table maps the Roman forms in a font to the
    corresponding Italic forms (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used mostly for Latin, particularly in fonts designed
    primarily for CJKV or other scripts that do not normally use italics.
  ui suggestion: When a user selects text and applies an Italic style, an application
    should check for this feature and use it if present.
jalt:
  application interface: In recommended usage, this feature is applied automatically
    to glyphs in justified text, as determined by a justication algorithm or direct
    user control. The feature may affect the length of lines, which should be taken
    into consideration by line-breaking and justification algorithms.
  example: In the Arabic script, providing alternate forms for line final glyphs would
    result in better justification and reduce the use of tatweels (Kashidas). eg.
    replacing a Swash Kaf with an alternate form.
  feature interaction: If the font contains'init','medi','fina','isol'features, these
    need to be called prior to calling this feature.
  friendly name: Justification Alternates
  function: Improves justification of text by replacing glyphs with alternate forms
    specifically designed for this purpose (they would have less or more advance width
    as need may be).
  recommended implementation: A 'jalt' lookup table maps the initial, medial, final
    or isolated forms to their corresponding alternate forms (GSUB lookup type 1).
  registered by: Microsoft
  script/language sensitivity: Can be used in any cursive script.
  ui suggestion: "This feature could be made active or inactive by default, at the\
    \ user\u2019s preference."
jp04:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The glyphis replaced by the glyph.
  feature interaction: This feature is exclusive with'jp78','jp83','jp90','nlck'and
    similar features. It can be combined with the'palt','vpal','vert'and'vrt2'features.
  friendly name: JIS2004 Forms
  function: The National Language Council (NLC) of Japan has defined new glyph shapes
    for a number of JIS characters, which were incorporated into JIS X 0213:2004 as
    new prototypical forms. The 'jp04' feature is a subset of the'nlck'feature, and
    is used to access these prototypical glyphs in a manner that maintains the integrity
    of JIS X 0213:2004.
  recommended implementation: One-for-one substitution of non-JIS X 0213:2004 glyphs
    by the corresponding JIS X 0213:2004 glyph.
  registered by: Adobe
  script/language sensitivity: Used only for Japanese.
  ui suggestion: This feature should be off by default.
jp78:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If the font is
    implemented using an alternate substitution lookup, the application must provide
    a means for the user to select the one desired. The application may assume that
    the first glyph in a set is the preferred form, so the font developer should order
    them accordingly. Note: This is a change of character code. Besides the original
    character code, the application should store the code for the new character.'
  example: The user would invoke this feature to replace kanji character U+5516 with
    U+555E.
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'palt','vpal','vert'and'vrt2'features,\
    \ which may be used in addition."
  friendly name: JIS78 Forms
  function: This feature replaces default (JIS90) Japanese glyphs with the corresponding
    forms from the JIS C 6226-1978 (JIS78) specification.
  recommended implementation: When JIS90 glyphs correspond to JIS78 forms, the 'jp78'
    table maps each of those glyphs to their alternates. While many of these substitutions
    are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB
    lookup type 3). The manufacturer may choose to build two tables (one for each
    lookup type) or only one which uses lookup type 3 for all substitutions.
  registered by: Adobe
  script/language sensitivity: Used only for Japanese.
  ui suggestion: This feature should be off by default.
jp83:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If the font is
    implemented using an alternate substitution lookup, the application must provide
    a means for the user to select the one desired.'
  example: Because of the Han unification in Unicode, there are no JIS83 glyphs which
    have distinct Unicode values, so the substitution cannot be described specifically.
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'palt','vpal','vert'and'vrt2'features,\
    \ which may be used in addition."
  friendly name: JIS83 Forms
  function: This feature replaces default (JIS90) Japanese glyphs with the corresponding
    forms from the JIS X 0208-1983 (JIS83) specification.
  recommended implementation: When JIS90 glyphs correspond to JIS83 forms, the 'jp83'
    table maps each of those glyphs to their alternates (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used only for Japanese.
  ui suggestion: This feature should be off by default.
jp90:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This is
    a change of character code. Besides the original character code, the application
    should store the code for the new character.'
  example: The user would invoke this feature to replace kanji character U+555E with
    U+5516.
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'palt','vpal','vert'and'vrt2'features,\
    \ which may be used in addition."
  friendly name: JIS90 Forms
  function: This feature replaces Japanese glyphs from the JIS78 or JIS83 specifications
    with the corresponding forms from the JIS X 0208-1990 (JIS90) specification.
  recommended implementation: The 'jp90' table maps each JIS78 and JIS83 form in a
    font to JIS90 forms (GSUB lookup type 1). The application stores a record of any
    simplified forms which resulted from substitutions (the 'jp78' or 'jp83' features);
    for such forms, applying the 'jp90' feature undoes the previous substitution.
    When there is no record of a substitution, the application uses the 'jp90' table
    to get back to the default form.
  registered by: Adobe
  script/language sensitivity: Used only for Japanese.
  ui suggestion: This feature should be off by default.
kern:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: "The o is shifted closer to the T in the combination \u201CTo.\u201D"
  feature interaction: If'kern'is activated,'palt'must also be activated if it exists.
    If'palt'is activated, there is no requirement that'kern'must also be activated.
    May be used in addition to any other feature except those which result in fixed
    (uniform) advance widths (e.g.'fwid','halt','hwid','qwid'and'twid').
  friendly name: Kerning
  function: "Adjusts amount of space between glyphs, generally to provide optically\
    \ consistent spacing between glyphs. Although a well-designed typeface has consistent\
    \ inter-glyph spacing overall, some glyph combinations require adjustment for\
    \ improved legibility. Besides standard adjustment in the horizontal direction,\
    \ this feature can supply size-dependent kerning data via device tables, \u201C\
    cross-stream\u201D kerning in the Y text direction, and adjustment of glyph placement\
    \ independent of the advance adjustment. Note that this feature may apply to runs\
    \ of more than two glyphs, and would not be used in monospaced fonts. Also note\
    \ that this feature does not apply to text set vertically."
  recommended implementation: The font stores a set of adjustments for pairs of glyphs
    (GPOS lookup type 2 or 8, XPlacement, XAdvance, YPlacement and YAdvance). These
    may be stored as one or more tables matching left and right classes, &/or as individual
    pairs. Additional adjustments may be provided for larger sets of glyphs (e.g.
    triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular
    combinations.
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be active by default for horizontal text setting.
    Applications may wish to allow users to add further manually-specified adjustments
    to suit specific needs and tastes.
lfbd:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. In recommended
    usage, the application applies this feature to characters at the left end of a
    horizontal line when paragraphs are left or left and right justified.'
  example: Succeeding lines beginning with T, D and W would shift to the left by varying
    amounts when the text is left-justified and this feature is applied.
  feature interaction: Should not be applied to glyphs which use fixed-width features
    (e.g.'fwid','halt','hwid','qwid'and'twid') or vertical features (e.g.'vert','vrt2','vpal','valt'and'vhal').
    Is called by the'opbd'feature.
  friendly name: Left Bounds
  function: Aligns glyphs by their apparent left extents at the left ends of horizontal
    lines of text, replacing the default behavior of aligning glyphs by their origins.
    This feature is called by the Optical Bounds ('opbd') feature.
  recommended implementation: Values for affected glyphs describe the amount by which
    the placement and advance width should be altered (GPOS lookup type 1).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: In recommended usage, this is applied to sequences automatically
    by applications when the 'opbd' feature is used, and direct user control is not
    required.
liga:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The glyph for ffl replaces the sequence of glyphs f f l.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Standard Ligatures
  function: Replaces a sequence of glyphs with a single glyph which is preferred for
    typographic purposes. This feature covers the ligatures which the designer/manufacturer
    judges should be used in normal conditions.
  recommended implementation: The 'liga' table maps sequences of glyphs to corresponding
    ligatures (GSUB lookup type 4). Ligatures with more components must be stored
    ahead of those with fewer components in order to be found. The set of standard
    ligatures will vary by design and script.
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature serves a critical function in some contexts, and should
    be active by default.
ljmo:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Hangul script, the jamo cluster is composed of three parts (leading
    consonant, vowel, and trailing consonant). When a sequence of leading class jamos
    are found, their combined leading jamo form is substituted.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Leading Jamo Forms
  function: Substitutes the leading jamo form of a cluster.
  recommended implementation: The default glyph for a leading jamo is mapped into
    an alternate form required for conjoining in a syllable (GSUB lookup type 1, or
    a contextual substitution referencing a type 1 lookup).
  registered by: Microsoft
  script/language sensitivity: Used for Hangul script , particularly when Unicode
    conjoining jamo characters are used.
  ui suggestion: Control of the feature should not generally be exposed to the user.
lnum:
  application interface: "Discretionary feature: can be applied to glyph runs based\
    \ on document markup, user control or other application criteria. Even if the\
    \ current figures resulted from an earlier substitution, it may not be correct\
    \ to simply revert to the original GIDs, because of interaction with the figure\
    \ width features, so it\u2019s best to use this table."
  example: The user invokes this feature in order to get lining figures, which fit
    better with all-capital text. Various characters designed to be used with figures
    may also be covered by this feature. In cases where lining figures are the default
    form, this feature would undo previous substitutions.
  feature interaction: This feature overrides the results of the Oldstyle Figures
    feature ('onum').
  friendly name: Lining Figures
  function: This feature changes selected non-lining figures (digits) to lining figures.
  recommended implementation: Glyphs for figures (digits) or other characters used
    in numbers (grouping or decimal separators) are mapped to corresponding lining
    forms (GSUB lookup type 1). If the default figures are non-lining, they too are
    mapped to the corresponding lining form.
  registered by: Adobe (Modified by Adobe, this is the newer description)
  script/language sensitivity: None.
  ui suggestion: This feature should be inactive by default. Users can switch between
    the lining and oldstyle sets by turning this feature on or off. Note that this
    feature is distinct from the figure width features ('pnum'and'tnum'). When the
    user invokes this feature, the application may wish to inquire whether a change
    in width is also desired.
locl:
  application interface: "In recommended usage, this feature triggers substitutions\
    \ or positioning adjustments to provide the most appropriate typography for the\
    \ language of content. This feature should always be applied. Language tagging\
    \ or similar metadata indicating the language of the text should be used to select\
    \ the most appropriate language system table within the font\u2019s GPOS or GSUB\
    \ table."
  example: The user applies this feature to text to enable localized Bulgarian forms
    of Cyrillic letters; alternatively, the feature might enable localized Russian
    forms in a Bulgarian manufactured font in which the Bulgarian forms are the default
    characters.
  feature interaction: This feature can be used in combination with any other feature.
    It replaces and extends the earlier locale-specific tags 'zhcn', 'zhtw', 'jajp',
    'kokr' and 'vivn' which had been defined for CJKV scripts.
  friendly name: Localized Forms
  function: "Many scripts used to write multiple languages over wide geographical\
    \ areas have developed localized variant forms of specific letters, which are\
    \ used by individual literary communities. For example, a number of letters in\
    \ the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts\
    \ and from each other. In some cases the localized form differs only subtly from\
    \ the script \u201Cnorm\u201D, in others the forms are radically distinct. This\
    \ feature enables localized forms of glyphs to be substituted for default forms."
  recommended implementation: For a given Unicode value, the font contains glyphs
    for two or more locales. The 'locl' table maps GIDs for default forms to GIDs
    for corresponding localized alternatives. These are one-to-one substitutions (GSUB
    lookup type 1).
  registered by: Tiro Typeworks/Adobe
  script/language sensitivity: None.
  ui suggestion: "Control of the feature should not generally be exposed to the user\
    \ directly. Control over language-specific typography should be provided by language\
    \ settings or by providing the user ability to choose between the alternative\
    \ language systems supported in the font\u2019s GPOS or GSUB tables."
ltra:
  application interface: "See section \u201CLeft-to-right and right-to-left text\u201D\
    \ on theAdvanced Typographic Extensionspage."
  feature interaction: This feature is to be applied simultaneously with other pre-shaping
    features such as'ccmp'and'locl'.
  friendly name: Left-to-right glyph alternates
  function: This feature applies glyphic variants (other than mirrored forms) appropriate
    for left-to-right text (for mirrored forms, see'ltrm').
  recommended implementation: These are required to be glyph substitutions, and it
    is recommended that they be one-to-one (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Left-to-right runs of text.
  ui suggestion: Control of this feature should not generally be exposed to the user.
ltrm:
  application interface: "See section \u201CLeft-to-right and right-to-left text\u201D\
    \ on theAdvanced Typographic Extensionspage."
  example: The Old South Arabian script is a case of a strong right-to-left script
    that can have lines laid out left-to-right, in which case some glyphs would need
    to be mirrored with the 'ltrm' feature.
  feature interaction: This feature is to be applied simultaneously with other pre-shaping
    features such as'ccmp'and'locl'.
  friendly name: Left-to-right mirrored forms
  function: This feature applies mirrored forms appropriate for left-to-right text.
    (For left-to-right glyph alternates, see'ltra').
  recommended implementation: These are required to be glyph substitutions, and it
    is recommended that they be one-to-one (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Left-to-right runs of text; also see Example above.
  ui suggestion: Control of this feature should not generally be exposed to the user.
mark:
  application interface: In recommended usage, this feature triggers positioning of
    mark glyphs required for correct layout. It should always be applied.
  example: In the Arabic script, positioning the Hamza above the Yeh.
  feature interaction: None.
  friendly name: Mark Positioning
  function: Positions mark glyphs with respect to base glyphs.
  recommended implementation: This feature may be implemented as a MarkToBase Attachment
    lookup (GPOS LookupType = 4) or a MarkToLigature Attachment lookup (GPOS LookupType
    = 5).
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: Control of this feature should not generally be exposed to the user.
med2:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of Syriac text. The application should always apply
    the feature to the Alaph glyph when the preceding base character is a joining
    character.
  example: When an Alaph is preceded by a Heth, the Alaph would be replaced by an
    appropriate form.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'init'and'fina'.
  friendly name: 'Medial Forms #2'
  function: Used to replace Alaph glyphs in the middle of Syriac words when the preceding
    base character can be joined to. This feature is used only for the Syriac script
    Alaph character.
  recommended implementation: Default alphabetic forms are mapped to corresponding
    medial forms (GSUB lookup type 1).
  registered by: Microsoft
  script/language sensitivity: Used only with the Syriac script.
  ui suggestion: Control of the feature should not generally be exposed to the user.
medi:
  application interface: "In recommended usage, this feature triggers substitutions\
    \ that are required for correct display of cursively-connecting scripts. It should\
    \ be applied in the appropriate contexts, as determined by script-specific processing\
    \ requirements. The application is responsible for parsing character strings and\
    \ identifying which of the joining-related features \u2014 initial forms ('init'),\
    \ medial forms ('medi'), terminal forms ('fina'), and isolated forms ('isol')\
    \ \u2014 to apply to which glyphs, based on character Joining_Type properties.\
    \ Additional factors, such as the presence of control characters, may also be\
    \ considered."
  example: "In an Arabic-script font, the application would apply the 'medi' feature\
    \ to the letter ARABIC LETTER QAF (U+0642 \u201C\u0642\u201D) when it follows\
    \ a left-joining character and precedes a right-joining character, thereby replacing\
    \ the default \u201C\u0642\u201D glyph with its dual-joining, medial form."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'fina','init'and'isol'.
  friendly name: Medial Forms
  function: Replaces glyphs for characters that have applicable joining properties
    with an alternate form when occurring in a medial context. This applies to characters
    that have the Unicode Joining_Type property value Dual_Joining.
  note: This feature description was significantly revised in 2016.
  recommended implementation: The 'medi' feature is used to map default forms to corresponding
    dual-joining, medial forms. This will usually be implemented using a single substitution
    (type 1) GSUB lookup, though contextual substitution GSUB lookups (types 5, 6
    or 8) may also be appropriate.
  registered by: Microsoft/Adobe
  script/language sensitivity: "Can be used in any script with joining behavior \u2014\
    \ that is, the scripts for which Joining_Type properties are given explicitly\
    \ in ArabicShaping.txt."
  ui suggestion: Control of the feature should not generally be exposed to the user.
mgrk:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This is
    a change of semantic value. Besides the original character codes, the application
    should store the code for the new character.'
  example: The user applies this feature to U+03A3 (Sigma), and gets U+2211 (summation).
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Mathematical Greek
  function: Replaces standard typographic forms of Greek glyphs with corresponding
    forms commonly used in mathematical notation (which are a subset of the Greek
    alphabet).
  recommended implementation: The 'mgrk' table maps Greek glyphs to the corresponding
    forms used for mathematics (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used with Greek characters.
  ui suggestion: This feature should be off by default in most applications. Math-oriented
    applications may want to activate this feature by default.
mkmk:
  application interface: In recommended usage, this feature triggers positioning of
    mark glyphs required for correct layout. It should always be applied.
  example: In Arabic, the ligaturised mark Ha with Hamza above it; can also be obtained
    by positioning these marks relative to one another.
  feature interaction: None.
  friendly name: Mark to Mark Positioning
  function: Positions marks with respect to other marks. Required in various non-Latin
    scripts like Arabic.
  recommended implementation: This feature may be implemented as a MarkToMark Attachment
    lookup (GPOS lookup type 6).
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: Control of this feature should not generally be exposed to the user.
mset:
  example: In Arabic, the Hamza is positioned differently when placed above a Yeh
    Barree as compared to the Alef.
  function: Positions Arabic combining marks in fonts for Windows 95 using glyph substitution.
  registered by: Microsoft
  windows 95 implementation: "In contrast to the 'mark' feature, 'mset' uses glyph\
    \ substitution to combine marks and base glyphs. It replaces a default mark glyph\
    \ with a correctly positioned mark glyph. The font designer specifies the position\
    \ of the mark when describing the mark\u2019s contour in the font file. Microsoft\u2019\
    s Arabic fonts, created for Windows 95, use a contextual substitution lookup (GSUB\
    \ LookupType = 5) to implement the 'mset' feature."
nalt:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If implemented
    in a font using an alternate substitution lookup, the application selects one
    of the alternative glyphs based on user choice or other criteria.'
  example: "The user invokes this feature to get U+3200 (the circled form of \u201C\
    ga\u201D) from U+3131 (hangul \u201Cga\u201D)."
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'vert'and'vrt2'features,\
    \ which may be used in addition."
  friendly name: Alternate Annotation Forms
  function: Replaces default glyphs with various notational forms (e.g. glyphs placed
    in open or solid circles, squares, parentheses, diamonds or rounded boxes). In
    some cases an annotation form may already be present, but the user may want a
    different one.
  recommended implementation: The 'nalt' table maps GIDs for various standard forms
    to one or more corresponding annotation forms. While many of these substitutions
    are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB
    lookup type 3). The manufacturer may choose to build two tables (one for each
    lookup type) or only one which uses lookup type 3 for all substitutions. If more
    than one form is present, the set of forms for each character should be ordered
    consistently - both within the font and across the family.
  registered by: Adobe
  script/language sensitivity: Used mostly in CJKV fonts, but can also be used for
    European scripts.
  ui suggestion: This feature should be inactive by default. When implemented in the
    font using an alternate substitution lookup, the application must provide a means
    for the user to select the desired form from the alternative glyphs mapped in
    the lookup. It can note the position of the selected form in a set of alternates,
    and offer the glyph at that position as the default selection the next time this
    feature is invoked. In the absence of such prior information, the application
    may assume that the first glyph in a set is the preferred form, so the font developer
    should order them accordingly.
nlck:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The glyphis replaced by the glyph.
  feature interaction: This feature is exclusive with the 'jp78', 'jp83', 'jp90' and
    similar features. It can be combined with the 'palt', 'vpal', 'vert' and 'vrt2'
    features.
  friendly name: NLC Kanji Forms
  function: The National Language Council (NLC) of Japan has defined new glyph shapes
    for a number of JIS characters in 2000. The'nlck'feature is used to access those
    glyphs.
  recommended implementation: One-for-one substitution of non-NLC glyphs by the corresponding
    NLC glyph.
  registered by: Adobe Systems Inc.
  script/language sensitivity: Used only for Kanji characters in Japanese.
  ui suggestion: This feature should be off by default.
nukt:
  application interface: In recommended usage, this feature triggers substitutions
    that are required for correct display of the given script. It should be applied
    in the appropriate contexts, as determined by script-specific processing requirements.
  example: In Hindi (Devanagari script), a consonant when combined with a nukta gives
    its nukta form.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic scripts. The application is expected to process
    this feature and certain other features in an appropriate order to obtain the
    correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Nukta Forms
  function: Produces Nukta forms in Indic scripts.
  recommended implementation: "The 'nukt' table maps the sequence of a consonant followed\
    \ by a nukta to the consonant\u2019s nukta form (GSUB lookup type 4)."
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
numr:
  application interface: "In recommended usage, this feature is applied automatically\
    \ as part of the application\u2019s implementation for the 'frac' feature. See\
    \ the'frac'for details."
  example: In the string 11/17 selected by the user, the application turns the 11
    into numerators, and the slash into a fraction slash when the user applies the
    fraction feature ('frac').
  feature interaction: This feature supports'frac'. It may be used in combination
    with other substitution (GSUB) features, whose results it may override.
  friendly name: Numerators
  function: Replaces selected figures (digits) which precede a slash with numerator
    figures, and replaces the typographic slash with the fraction slash.
  recommended implementation: Glyphs for figures (digits) or other characters used
    in numbers (grouping or decimal separators) are mapped to corresponding numerator
    glyphs; and the glyph for slash (U+002F) is mapped to a fraction slash (glyph
    for U+2044). Substitutions are one-to-one (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: In recommended usage, this feature is applied to sequences automatically
    by applications when the 'frac' feature is used, and direct user control is not
    required.
onum:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user invokes this feature to get oldstyle figures, which fit better
    into the flow of normal upper- and lowercase text. Various characters designed
    to be used with figures may also have oldstyle versions.
  feature interaction: This feature overrides the results of the Lining Figures feature
    ('lnum').
  friendly name: Oldstyle Figures
  function: This feature changes selected figures from the default or lining style
    to oldstyle form.
  recommended implementation: Glyphs for figures (digits) or other characters used
    in numbers (grouping or decimal separators) are mapped to corresponding oldstyle
    forms (GSUB lookup type 1). If the default figures are non-lining, they too are
    mapped to the corresponding oldstyle form.
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: 'This feature should be inactive by default. Users can switch between
    the default and oldstyle figure sets by turning this feature on or off. Note:
    This feature is separate from the figure-width features''pnum''and''tnum''. When
    the user changes figure style, the application may want to query whether a change
    in width is also desired.'
opbd:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. The application
    implementation for this feature should make use of the''lfbd''and''rtbd''features:
    the ''lfbd'' feature should be applied automatically to glyphs at the left end
    of a horizontal line; the ''rtbd'' feature should be applied automatically to
    glyphs at the right end of a horizontal line. It affects the line length, which
    should be taken into consideration by line-breaking and justification algorithms.'
  example: Succeeding lines beginning with T, D and W would shift to the left by varying
    amounts when the text is left-justified and this feature is applied. Succeeding
    lines ending with r, h and y would likewise shift to the right by differing degrees
    when the text is right-justified and this feature is applied.
  feature interaction: Should not be applied to glyphs which use fixed-width features
    (e.g.'fwid','halt','hwid','qwid'and'twid') or vertical features (e.g.'vert','vrt2','vpal','valt'and'vhal').
    Uses'lfbd'and'rtbd'features.
  friendly name: Optical Bounds
  function: Aligns glyphs by their apparent left or right extents in horizontal setting,
    or apparent top or bottom extents in vertical setting, replacing the default behavior
    of aligning glyphs by their origins. Another name for this behavior would be visual
    justification. The optical edge of a given glyph is only indirectly related to
    its advance width or bounding box; this feature provides a means for getting true
    visual alignment.
  recommended implementation: Positioning adjustments (GPOS lookup type 1) are implemented
    in separate lookups associated with features for left, right, top and bottom line
    positions.
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be active by default.
ordn:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.  When processing
    lookups, context before or after the glyph sequence to which the feature is applied
    must be considered. Note: This may be a change of semantic value. Besides the
    original character codes, the application should store the code for the new character.'
  example: The user applies this feature to turn 2.o into 2.o(abbreviation for secundo).
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Ordinals
  function: Replaces default alphabetic glyphs with the corresponding ordinal forms
    for use after figures. One exception to the follows-a-figure rule is the numero
    character (U+2116), which is actually a ligature substitution, but is best accessed
    through this feature.
  recommended implementation: "Glyphs for various lowercase letters are mapped to\
    \ corresponding ordinal forms using a chained-context substitution (GSUB lookup\
    \ type 6); and the sequence of default glyphs for \u201CNo\u201D are mapped to\
    \ a numero ligature glyph (GSUB lookup type 4).."
  registered by: Adobe
  script/language sensitivity: Used mostly for Latin script.
  ui suggestion: This feature should be off by default.
ornm:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. When this feature
    is invoked, the application must note whether the selected text is the bullet
    character (U+2022) or alphanumeric characters. In the first case, it retrieves
    the glyphs mapped from the bullet glyph, and gives the user a means to select
    from among them. In the second case, a substitution is applied directly.'
  example: "The user inputs \u201Cqwwwwwwwwwe\u201D to form the top of a flourished\
    \ box in Adobe Caslon, or inputs the bullet character, then chooses the thistle\
    \ dingbat."
  feature interaction: "This feature is mutually exclusive with all other substitution\
    \ (GSUB) features, which should be turned off when it\u2019s applied."
  friendly name: Ornaments
  function: "This is a dual-function feature, which uses two input methods to give\
    \ the user access to ornament glyphs (e.g. fleurons, dingbats and border elements)\
    \ in the font. One method replaces the bullet character with a selection from\
    \ the full set of available ornaments; the other replaces specific \u201Clower\
    \ ASCII\u201D characters with ornaments assigned to them. The first approach supports\
    \ the general or browsing user; the second supports the power user."
  recommended implementation: All ornament glyphs are mapped from the default glyph
    of the bullet character (U+2022) as alternates (GSUB lookup type 3); or ornament
    glyphs are mapped from the default glyph of corresponding alphanumeric characters
    (GSUB lookup type 1). The manufacturer may choose to build two tables (one for
    each lookup type) or only one which uses lookup type 3 for all substitutions.
    As in any alternate substitution lookup, alternates present in more than one face
    should be ordered consistently across a family, so that those alternates can work
    correctly when switching between family members.
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be inactive by default. When implemented in the
    font using an alternate substitution looup (the bullet case), an application could
    display the forms sequentially in context, or present a palette showing all the
    forms at once, or give the user a choice between these approaches. Once the user
    has selected a specific ornament, that one should be the default selection the
    next time the bullet is typed. In the absence of such prior information, the application
    may assume that the first ornament in a set is the preferred form, so the font
    developer should order them accordingly.
palt:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a Japanese font to get Latin, Kanji,
    Kana or Symbol glyphs with the full-width design but individual metrics.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'fwid','halt','hwid','qwid'and'twid'), which should be turned\
    \ off when it\u2019s applied. If'palt'is activated, there is no requirement that'kern'must\
    \ also be activated. If'kern'is activated,'palt'must also be activated if it exists.\
    \ See also'vpal'."
  friendly name: Proportional Alternate Widths
  function: Re-spaces glyphs designed to be set on full-em widths, fitting them onto
    individual (more or less proportional) horizontal widths. This differs from 'pwid'
    in that it does not substitute new glyphs (GPOS, not GSUB feature). The user may
    prefer the monospaced form, or may simply want to ensure that the glyph is well-fit
    and not rotated in vertical setting (Latin forms designed for proportional spacing
    would be rotated).
  recommended implementation: The font specifies alternate metrics for the full-width
    glyphs (GPOS lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used mostly in CJKV fonts.
  ui suggestion: This feature would be off by default.
pcap:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user enters text as lowercase or mixed case, and gets petite cap text
    or text with regular uppercase and petite caps. Note that some designers, might
    extend the petite cap lookups to include uppercase-to-smallcap substitutions,
    creating a shifting hierarchy of uppercase forms.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Petite Capitals
  function: Some fonts contain an additional size of capital letters, shorter than
    the regular smallcaps and whimsically referred to as petite caps. Such forms are
    most likely to be found in designs with a small lowercase x-height, where they
    better harmonise with lowercase text than the taller smallcaps (for examples of
    petite caps, see the Emigre type families Mrs Eaves and Filosofia). This feature
    turns glyphs for lowercase characters into petite capitals. Forms related to petite
    capitals, such as specially designed figures, may be included.
  recommended implementation: The 'pcap' table maps lowercase glyphs to the corresponding
    petite cap forms (GSUB lookup type 1).
  registered by: Tiro Typeworks / Emigre
  script/language sensitivity: Applies only to scripts with both upper- and lowercase
    forms (e.g. Latin, Cyrillic, Greek).
  ui suggestion: This feature should be off by default.
pkna:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a Japanese font to get a proportional
    glyph instead of a corresponding half- or full-width kana glyph.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'fwid','halt','hwid','palt','pwid','qwid','twid', and'vhal'),\
    \ which should be turned off when it\u2019s applied. Applying this feature should\
    \ activate the'kern'feature."
  friendly name: Proportional Kana
  function: Replaces glyphs, kana and kana-related, set on uniform widths (half or
    full-width) with proportional glyphs.
  recommended implementation: The font contains alternate kana and kana-related glyphs
    designed to be set on proportional widths (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Generally used only in Japanese fonts.
  ui suggestion: This feature would normally be off by default.
pnum:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may apply this feature to get even spacing for lining figures
    used as dates in an all-cap headline.
  feature interaction: This feature overrides the results of the Tabular Figures feature
    ('tnum').
  friendly name: Proportional Figures
  function: Replaces figure glyphs set on uniform (tabular) widths with corresponding
    glyphs set on glyph-specific (proportional) widths. Tabular widths will generally
    be the default, but this cannot be safely assumed. Of course this feature would
    not be present in monospaced designs.
  recommended implementation: In order to simplify associated kerning and get the
    best glyph design for a given width, this feature should use new glyphs for the
    figures, rather than only adjusting the fit of the tabular glyphs (although some
    may be simple copies); i.e. not a GPOS feature. The 'pnum' table maps tabular
    versions of lining and/or oldstyle figures to corresponding proportional glyphs
    (GSUB lookup type 1).
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. The application may want to
    query the user about this feature when the user changes figure style ('onum'or'lnum').
pref:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements. The effect
    of lookups associated with this feature may be used by the application to control
    subsequent reordering of conjoined consonant glyphs, as determined by script-specific
    processing requirements.
  example: In the Khmer script, the consonant Ra has a pre-base subscript form called
    Coeng Ra. When the sequence of Coeng followed by Ra occurs, its pre-base form
    is substituted.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of certain Indic and southeast Asian scripts. The application
    is expected to process this feature and certain other features in an appropriate
    order to obtain the correct set of basic forms for the given script. For Indic
    scripts, the following features should be applied in order:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Pre-base Forms
  function: Substitutes the pre-base form of a consonant.
  recommended implementation: The 'pref' table maps the sequence required to convert
    a consonant into its pre-base form (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Khmer, Myanmar (Burmese) and other Brahmi-derived
    scripts that may display a pre-base form of Ra.
  ui suggestion: Control of the feature should not generally be exposed to the user.
pres:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In the Gujarati (Indic) script, the doubling of consonant Ka requires the
    first Ka to be substituted by its pre-base form. This in turn ligates with the
    second Ka. Applying this feature would result in the ligaturised version of the
    doubled Ka.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Pre-base Substitutions
  function: Produces the pre-base forms of conjuncts in Indic scripts. It can also
    be used to substitute the appropriate glyph variant for pre-base vowel signs.
  recommended implementation: The 'pres' table maps a sequence of consonants separated
    by the virama (halant), to the ligated conjunct form (GSUB lookup type 4). In
    the case of pre-base matra substitution, the appropriate matra can be substituted
    using contextual substitution (GSUB lookup type 5).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
pstf:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In the Gurmukhi (Indic) script, the consonant Ya has a post base form.
    When the Ya is used as the second consonant in conjunct formation, its post-base
    form is substituted.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic and other related scripts. The application is
    expected to process this feature and certain other features in an appropriate
    order to obtain the correct set of basic forms for the given script. For Indic
    scripts, the following features should be applied in order:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Post-base Forms
  function: Substitutes the post-base form of a consonant.
  recommended implementation: The 'pstf' table maps the sequence required to convert
    a consonant into its post-base form (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: 'Used for scripts of south and southeast Asia that
    have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer.'
  ui suggestion: Control of the feature should not generally be exposed to the user.
psts:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In the Malayalam (Indic) script, the consonant Va has a post base form.
    When the Va is doubled to form a conjunct- VVa; the first Va [base] and the post
    base form that follows it, is substituted with a ligature.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Post-base Substitutions
  function: Substitutes a sequence of a base glyph and post-base glyph, with its ligaturised
    form.
  recommended implementation: The 'psts' table maps identified conjunct formation
    sequences to corresponding ligatures (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
pwid:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a Japanese font to get a proportionally-spaced
    glyph instead of a corresponding half-width Roman glyph or a full-width Kana glyph.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'fwid','halt','hwid','palt','qwid','twid','valt'and'vhal'), which\
    \ should be turned off when it\u2019s applied. Applying this feature should activate\
    \ the'kern'feature."
  friendly name: Proportional Widths
  function: Replaces glyphs set on uniform widths (typically full or half-em) with
    proportionally spaced glyphs. The proportional variants are often used for the
    Latin characters in CJKV fonts, but may also be used for Kana in Japanese fonts.
  recommended implementation: The font contains alternate glyphs designed to be set
    on proportional widths (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Although used mostly in CJKV fonts, this feature could
    be applied in European scripts.
  ui suggestion: Applications may want to have this feature active or inactive by
    default depending on their markets.
qwid:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may apply 'qwid' to place a four-digit figure in a single slot
    in a column of vertical text.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'fwid','halt','hwid'and'twid'), which should be turned off when\
    \ it\u2019s applied. It deactivates the'kern'feature."
  friendly name: Quarter Widths
  function: Replaces glyphs on other widths with glyphs set on widths of one quarter
    of an em (half an en). The characters involved are normally figures and some forms
    of punctuation.
  recommended implementation: The font may contain alternate glyphs designed to be
    set on quarter-em widths (GSUB lookup type 1), or it may specify alternate metrics
    for the original glyphs (GPOS lookup type 1) which adjust their spacing to fit
    in quarter-em widths.
  registered by: Adobe
  script/language sensitivity: Generally used only in CJKV fonts.
  ui suggestion: This feature would normally be off by default.
rand:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. The feature is
    designed to be used with an alternate substitution lookup that provides a selection
    of alternate glyphs for a given character. The application selects one of these
    either by a pseudo-random algorithm, or by noting the sequence of IDs returned,
    storing that sequence, and stepping through that set as the corresponding character
    code is invoked.'
  example: The user applies this feature in FF Kosmic to get three forms of f in one
    word.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Randomize
  function: In order to emulate the irregularity and variety of handwritten text,
    this feature allows multiple alternate forms to be used.
  recommended implementation: The rand table maps GIDs for default glyphs to one or
    more GIDs for corresponding alternates (GSUB lookup type 3).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: When supported by the font, the feature should be enabled by default.
    In recommended usage, the application selects a glyph alternate automatically
    and does not need to present the alternates for the user to make a selection.
rclt:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements. When processing
    lookups, context before or after the glyph sequence to which the feature is applied
    must be considered.
  example: In an Arabic calligraphic font the 'rclt' feature is used to contextually
    substitute variant forms of letters sin and yeh providing for a correct join between
    these two letters that differs from the default join of either to other letters.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. For complex scripts, lookups for
    this feature should be ordered and processed after basic script and language shaping
    features.
  friendly name: Required Contextual Alternates
  function: 'In specified situations, replaces default glyphs with alternate forms
    which provide for better joining behavior or other glyph relationships. Especially
    important in script typefaces which are designed to have some or all of their
    glyphs join, but applicable also to e.g. variants to improve spacing. This feature
    is similar to ''calt'', but with the difference that it should not be possible
    to turn off ''rclt'' substitutions: they are considered essential to correct layout
    of the font.'
  recommended implementation: The 'rclt' table specifies the context in which each
    substitution occurs, and maps one or more default glyphs to replacement glyphs
    (GSUB lookup type 6).
  registered by: Microsoft
  script/language sensitivity: May be used for any script, but is especially important
    for many styles of Arabic.
  ui suggestion: Control of this feature should not generally be exposed to the user.
rkrf:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Hindi (Devanagari script), the conjunct KRa is denoted with a conjunct
    ligature form.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic scripts. The application is expected to process
    this feature and certain other features in an appropriate order to obtain the
    correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Rakar Forms
  function: Produces conjoined forms for consonants with rakar in Devanagari and Gujarati
    scripts.
  recommended implementation: The 'rkrf' table maps the sequence of a consonant (the
    nominal form only) followed by a virama (halant) followed by Ra (the nominal form)
    to the corresponding conjoined form (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Devanagari, Gujarati, and other Brahmi-derived
    scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
rlig:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: "The Arabic character lam followed by alef will always form a ligated lamalef\
    \ form. This ligated form is a requirement of the script\u2019s shaping. The same\
    \ happens with the Syriac script."
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. See also'liga'.
  friendly name: Required Ligatures
  function: Replaces a sequence of glyphs with a single glyph which is preferred for
    typographic purposes. This feature covers those ligatures, which the script determines
    as required to be used in normal conditions. This feature is important for some
    scripts to insure correct glyph formation.
  recommended implementation: Glyph sequences are mapped to a single, ligature glyph
    (GSUB lookup type 4). Note that, if multiple sequences have the same initial sub-sequence,
    substitutions for longer sequences should be stored ahead of those for shorter
    sequences.
  registered by: Microsoft
  script/language sensitivity: Used for Arabic and Syriac. May also be used for other
    scripts.
  ui suggestion: Control of this feature should not generally be exposed to the user.
rphf:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct display of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In the Devanagari (Indic) script, the consonant Ra possesses a reph form.
    When the Ra is a syllable initial consonant and is followed by the virama, it
    is repositioned after the post base vowel sign within the syllable, and also substituted
    with a mark that sits above the base glyph.
  feature interaction: This feature is used in conjunction with certain other features
    to derive required forms of Indic scripts. The application is expected to process
    this feature and certain other features in an appropriate order to obtain the
    correct set of basic forms:'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'.
    Other discretionary features for optional typographic effects may also be applied.
    Lookups for such discretionary features should be processed after lookups for
    this feature have been processed.
  friendly name: Reph Form
  function: Substitutes the Reph form for a consonant and halant sequence.
  recommended implementation: A 'rphf' lookup table maps the sequence of default form
    of Ra and virama to the Reph (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Indic or other Brahmi-derived scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
rtbd:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. In recommended
    usage, the application applies this feature to characters at the right end of
    a horizontal line when paragraphs are right or left and right justified.'
  example: Succeeding lines ending with r, h and y would shift to the right by differing
    degrees when the text is right-justified and this feature is applied.
  feature interaction: Should not be applied to glyphs which use fixed-width features
    (e.g.'fwid','halt','hwid','qwid'and'twid') or vertical features (e.g.'vert','vrt2','vpal','valt'and'vhal').
    Is called by'opbd'feature.
  friendly name: Right Bounds
  function: Aligns glyphs by their apparent right extents at the right ends of horizontal
    lines of text, replacing the default behavior of aligning glyphs by their origins.
    This feature is called by the Optical Bounds('opbd')feature.
  recommended implementation: Values for affected glyphs describe the amount by which
    the placement and advance width should be altered (GPOS lookup type 1).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: In recommended usage, this feature is applied to sequences automatically
    by applications when the 'opbd' feature is used, and direct user control is not
    required.
rtla:
  application interface: "See section \u201CLeft-to-right and right-to-left text\u201D\
    \ on theAdvanced Typographic Extensionspage."
  feature interaction: This feature is to be applied simultaneously with other pre-shaping
    features such as'ccmp'and'locl'.
  friendly name: Right-to-left alternates
  function: This feature applies glyphic variants (other than mirrored forms) appropriate
    for right-to-left text. (For mirrored forms, see'rtlm'.)
  recommended implementation: These are required to be glyph substitutions, and it
    is recommended that they be one-to-one (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Right-to-left runs of text.
  ui suggestion: Control of this feature should not generally be exposed to the user.
rtlm:
  application interface: "See section \u201CLeft-to-right and right-to-left text\u201D\
    \ on theAdvanced Typographic Extensionspage."
  example: The 'rtlm' feature replaces the glyph for U+2232, CLOCKWISE CONTOUR INTEGRAL,
    with one in which the integral sign is mirrored but the circular arrow has retained
    its direction.
  feature interaction: This feature is to be applied simultaneously with other pre-shaping
    features such as'ccmp'and'locl'.
  friendly name: Right-to-left mirrored forms
  function: This feature applies mirrored forms appropriate for right-to-left textotherthan
    for those characters that would be covered by the character-level mirroring step
    performed by an OpenType layout engine. (For right-to-left glyph alternates, see'rtla'.)
  recommended implementation: These are required to be glyph substitutions, and it
    is recommended that they be one-to-one (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Right-to-left runs of text.
  ui suggestion: Control of this feature should not generally be exposed to the user.
ruby:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. After associated
    lookups are applied, applications may re-size or scale glyphs or perform other
    positioning or layout adjustments based on other parameters.'
  example: The user applies this feature to the kana character U+3042, to get the
    ruby form for annotation.
  feature interaction: This feature overrides the results of any other feature for
    the affected characters.
  friendly name: Ruby Notation Forms
  function: "Japanese typesetting often uses smaller kana glyphs, generally in superscripted\
    \ form, to clarify the meaning of kanji which may be unfamiliar to the reader.\
    \ These are called \u201Cruby\u201D, from the old typesetting term for four-point-sized\
    \ type. This feature identifies glyphs in the font which have been designed for\
    \ this use, substituting them for the default designs."
  recommended implementation: The font contains alternate glyphs for all kana characters
    which are enabled for ruby notation. The 'ruby' table maps GIDs for default forms
    to GIDs for corresponding ruby alternates. These are one-to-one substitutions
    (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used for Japanese.
  ui suggestion: This feature should be inactive by default. Applications may offer
    the user an opportunity to specify the degree of scaling and baseline shift.
rvrn:
  application interface: Application of the 'rvrn' feature is mandatory in implementations
    that support OpenType Font Variations whenever a variable font is in use. The
    feature should be processed in any layout process that supports use of variations,
    even if other OpenType Layout processing is not supported.
  example: A variable font supports weight variations ranging from thin to black.
    The default glyph for the dollar sign has two vertical strokes running through
    the full extent of the glyph. In the bold variation instance, the default glyph
    is substituted to an alternate glyph that has only one vertical stroke. In the
    black variation instance, the default glyph is substituted to an alternate glyph
    have has only single vertical bars at the top and bottom extremities, with no
    vertical bars in the two counters in between.
  feature interaction: The feature should be processed early after initial character-to-glyph
    mapping, before application of the localized forms ('locl') feature, any features
    related to shaping of complex scripts, or any discretionary features.
  friendly name: Required Variation Alternates
  function: This feature is used in fonts that support OpenType Font Variations in
    order to select alternate glyphs for particular variation instances. (For background
    on OpenType Font Variations, seeOpenType Font Variations Overview.)
  recommended implementation: The feature is used to activate single substitution
    (GSUB type 1) lookups, and is always used in conjunction with a FeatureVariations
    table. Typically, a Feature table referenced in a FeatureRecord with the 'rvrn'
    tag will have LookupCount set to 0; in this way, the default variation instance
    does not have any glyph substitution applied but, rather, uses default glyphs.
    Alternate glyphs for particular variation instances are obtained by adding a substitution
    of the feature table to an alternate feature table within a FeatureVariations
    table. Different alternate feature tables may be selected using condition sets
    that specify particular variation-axis value ranges.
  registered by: Microsoft
  script/language sensitivity: None.
  ui suggestion: 'The ''rvrn'' feature is mandatory: it should be active by default
    and not directly exposed to user control.'
salt:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If implemented
    in a font using an alternate substitution lookup, the application selects one
    of the alternative glyphs based on user choice or other criteria.'
  example: The user applies this feature to Industria to get the alternate form of
    g.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Stylistic Alternates
  function: "Many fonts contain alternate glyph designs for a purely esthetic effect;\
    \ these don\u2019t always fit into a clear category like swash or historical.\
    \ As in the case of swash glyphs, there may be more than one alternate form. This\
    \ feature replaces the default forms with the stylistic alternates."
  recommended implementation: The 'salt' table maps GIDs for default forms to one
    or more GIDs for corresponding stylistic alternatives. While many of these substitutions
    are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB
    lookup type 3). The manufacturer may choose to build two tables (one for each
    lookup type) or only one which uses lookup type 3 for all substitutions. As in
    any one-from-many substitution, alternates present in more than one face should
    be ordered consistently across a family, so that those alternates can work correctly
    when switching between family members.
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be inactive by default. When implemented in the
    font using an alternate substitution lookup, an application could display the
    forms sequentially in context, or present a palette showing all the forms at once,
    or give the user a choice between these approaches. The application may assume
    that the first glyph in a set is the preferred form, so the font developer should
    order them accordingly.
sinf:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The application can use this feature to automatically access the inferior
    figures (more legible than scaled figures).
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Scientific Inferiors
  function: Replaces lining or oldstyle figures (digits) with inferior figures (smaller
    glyphs which sit lower than the standard baseline, primarily for chemical or mathematical
    notation). May also replace glyphs for lowercase characters with alphabetic inferiors.
  recommended implementation: Glyphs for figures (digits) are mapped to corresponding
    inferior forms (GSUB lookup type 1).
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
size:
  application interface: When the user specifies a size, the application checks for
    a 'size' feature in the active font. If none is found, the application follows
    its default behavior. If one is found, the application follows the specified offset
    to retrieve the five values.
  example: "The 'size' information in Bell Centennial is [60 0 0 0 0]. This tells\
    \ an application that the font\u2019s design size is six points, so larger sizes\
    \ may need proportionate reduction in default inter-glyph spacing. The 'size'\
    \ information in Minion Pro Semibold Condensed Subhead is [180 3 257 139 240].\
    \ These values tell an application that:"
  feature interaction: None.
  friendly name: Optical size
  function: 'This feature stores two kinds of information about the optical size of
    the font: design size (the point size for which the font is optimized) and size
    range (the range of point sizes which the font can serve well), as well as other
    information which helps applications use the size range. The design size is useful
    for determining proper tracking behavior. The size range is useful in families
    which have fonts covering several ranges. Additional values serve to identify
    the set of fonts which share related size ranges, and to identify their shared
    name. Note that sizes refer to nominal final output size, and are independent
    of viewing magnification or resolution.'
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be active by default. Applications may want to
    present the tracking curve to the user for adjustments via a GUI. At start-up,
    and when fonts are added or removed, applications may want to build a list of
    fonts with such ranges, and display the filtered subfamily names in their font
    selection UI, with each filtered name representing the full set of related sizes.
    Applications may also present a setting which allows the user to select non-default
    sizes (for example, in the case where final output is intended for on-screen viewing,
    a smaller optical size will produce better results). In such a case, the font-selection
    UI should present the unfiltered names. Applications should notify the user if
    fonts are removed or added from a subfamily with size ranges, and query about
    desired behavior.
smcp:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user enters text as mixed capitals and lowercase, and gets Large &
    small cap text.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Also see'c2sc'.
  friendly name: Small Capitals
  function: This feature turns glyphs for lowercase characters into small capitals.
    It is generally used for display lines set in Large & small caps, such as titles.
    Forms related to small capitals, such as oldstyle figures, may be included.
  recommended implementation: Glyphs for lowercase characters are mapped to the corresponding
    small-cap forms (GSUB lookup type 1).
  registered by: Microsoft/Adobe
  script/language sensitivity: Used for bicameral scripts (i.e. those with case differences),
    such as Latin, Greek, Cyrillic, and Armenian.
  ui suggestion: This feature should be off by default.
smpl:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This is
    a change of character code. Besides the original character code, the application
    should store the code for the new character.'
  example: The user gets U+53F0 when U+6AAF, U+81FA, or U+98B1 is entered.
  feature interaction: "This feature is mutually exclusive with all other features,\
    \ which should be turned off when it\u2019s applied, except the'palt','vert'and'vrt2'features,\
    \ which may be used in addition;'trad'and'tnam'are mutally exclusive, and override\
    \ the results of 'smpl'."
  friendly name: Simplified Forms
  function: "Replaces \u201Ctraditional\u201D Chinese or Japanese forms with the corresponding\
    \ \u201Csimplified\u201D forms."
  recommended implementation: The 'smpl' table maps each traditional form in a font
    to a corresponding simplified form (GSUB lookup type 1). Note that more than one
    traditional form may map to a single simplified form.
  registered by: Adobe
  script/language sensitivity: Used only for Chinese and Japanese.
  ui suggestion: This feature would be off by default, but could be made the default
    by a preference setting.
ss01:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 1
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss02:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 2
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss03:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 3
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss04:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 4
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss05:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 5
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss06:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 6
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss07:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 7
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss08:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 8
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss09:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 9
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss10:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 10
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss11:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 11
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss12:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 12
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss13:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 13
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss14:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 14
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss15:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 15
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss16:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 16
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss17:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 17
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss18:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 18
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss19:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 19
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ss20:
  application interface: 'Discretionary features: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override. Note that after an 'ssXX' feature
    has been applied, the user may wish to apply glyph-specific features, e.g.'salt',
    to individual glyphs in the resulting layout; font developers are responsible
    for ordering substitution lookups to obtain desired user experience.
  friendly name: Stylistic Set 20
  function: "In addition to, or instead of, stylistic alternatives of individual glyphs\
    \ (see'salt'feature), some fonts may contain sets of stylistic variant glyphs\
    \ corresponding to portions of the character set, e.g. multiple variants for lowercase\
    \ letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise\
    \ visually, interract in particular ways, or otherwise work together. Examples\
    \ of fonts including stylistic sets are Zapfino Linotype and Adobe\u2019s Poetica.\
    \ Individual features numbered sequentially with the tag name convention 'ss01',\
    \ 'ss02', 'ss03'\u2026 'ss20' provide a mechanism for glyphs in these sets to\
    \ be associated via GSUB lookup indices to default forms and to each other, and\
    \ for users to select from available stylistic sets."
  recommended implementation: An 'ssXX' lookup table maps GIDs for default forms to
    GIDs for corresponding stylistic alternatives in each set. Each 'ssXX' feature
    uses one-to-one (GSUB lookup type 1) substitutions. Font developers may choose
    to map only from default forms to variants for each stylistic set, or may choose
    to map between all stylistic sets in each feature, depending on intended user
    experience. For example, feature 'ss03' might contain lookups mapping variant
    glyphs from 'ss01' and 'ss02' to corresponding variants in 'ss03', in addition
    to mapping from default forms.
  registered by: Tiro Typeworks
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. Note that the application
    is responsible for counting and enumerating the number of features in the font
    with tag names of the format 'ss01' to 'ss20', and for presenting the user with
    an appropriate selection mechanism.
ssty:
  application interface: In recommended usage, this feature is used to trigger substitutions
    that are required for correct display of math formula. It should be applied in
    appropriate contexts under the control of a math layout handler. If implemented
    in a font using an alternate substitution lookup, the first or second alternate
    glyph should be selected depending on the nesting level within the math formula.
    See the'MATH' tablechapter for additional information.
  example: In the formula, the glyph for the letter b will be substituted with a script
    level 1 variant, and the glyph for the letter c will be substituted with a script
    level 2 variant.
  feature interaction: This feature is applied to individual glyphs during layout
    of math formula.
  friendly name: Math script style alternates
  function: This feature provides glyph variants adjusted to be more suitable for
    use in subscripts and superscripts. The script style forms should not be scaled
    or moved in the font; scaling and moving them is done by the math layout engine.
    Instead, the 'ssty' feature should provide glyph forms that result in shapes that
    look good as superscripts and subscripts when scaled and positioned by the Math
    engine. When designing the script forms, the font developer may assume that MATH.MathConstants.scriptPercentScaleDown
    and MATH.MathConstants.scriptScriptPercentScaleDown will be the scaling factors
    used by the Math engine.
  recommended implementation: "Alternate substitution, with parameter 1 or 2 corresponding\
    \ to sub- or super-script level alternate glyphs. If there are no second-level\
    \ alternates defined in the font, single substitution may also be used. Glyphs\
    \ that don\u2019t have script alternates can be omitted from this table. See theMATHtable\
    \ specification for details."
  registered by: Microsoft
  script/language sensitivity: Used for math formula layout.
  ui suggestion: Control of the feature should not generally be exposed to the user.
stch:
  application interface: For characters that require stretching, such as Syriac abbreviation
    mark (U+070F), the 'stch' feature is applied. If the default glyph for the character
    is in the coverage of an associated lookup subtable, the mapped glyph sequence
    is retrieved. The last glyph of the substitute sequence is reordered to the end
    of the sequence of glyphs to be enclosed or encompassed. The remaining glyphs
    from the substitution sequence are inserted before the sequence of glyphs to be
    enclosed. Odd-numbered glyphs in the substitution sequence are positioned so as
    to be distributed evenly over the width of text being enclosed. Even-numbered
    glyphs are repeated so that the spaces between the odd-numbered glyphs is filled.
  example: In Syriac, the character 0x070F is a control character that is rendered
    as a line above an abbreviation in Syriac script. The line should have a circle
    at each end and at the mid point. The decomposition sequence for this character
    should consist of a circle at the start of a line, a connecting line, a circle
    on a line for the mid point, a second connecting line, and a circle at the end
    of the line. The connecting lines will repeat in order to fill the space between
    the circle glyphs.
  feature interaction: None
  friendly name: Stretching Glyph Decomposition
  function: Unicode characters, such as the Syriac Abbreviation Mark (U+070F), that
    enclose other characters need to be able to stretch in order to dynamically adapt
    to the width of the enclosed text. This feature defines a decomposition set consisting
    of an odd number of glyphs which describe the stretching glyph. The odd numbered
    glyphs in the decomposition are fixed reference points which are distributed evenly
    from the start to the end of the enclosed text. The even numbered glyphs may be
    repeated as necessary to fill the space between the fixed glyphs. The first and
    last glyphs may either be simple glyphs with width at the baseline, or mark glyphs.
    All other decomposition glyphs should have width, but must be defined as mark
    glyphs.
  recommended implementation: The default glyph for a character that requires stretching
    is mapped to a sequence comprised of an odd number of corresponding glyphs (GSUB
    lookup type 2).
  registered by: Microsoft
  script/language sensitivity: None
  ui suggestion: Control of this feature should not generally be exposed to the user.
subs:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This is
    a change of semantic value. Besides the original character codes, the application
    should store the code for the new character.'
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Subscript
  function: The 'subs' feature may replace a default glyph with a subscript glyph,
    or it may combine a glyph substitution with positioning adjustments for proper
    placement.
  recommended implementation: First, a single or contextual substitution lookup implements
    the subscript glyph (GSUB lookup type 1). Then, if the glyph needs repositioning,
    a single adjustment, pair adjustment, or contextual adjustment positioning lookup
    is used to modify its position (GPOS lookup type 1 or type 2, or a contextual
    lookup that references a type 1 or type 2 lookup).
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
sups:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This can
    include a change of semantic value. Besides the original character codes, the
    application should store the code for the new character.'
  example: The application can use this feature to automatically access the superior
    figures (more legible than scaled figures) for footnotes, or the user can apply
    it to Mssr to get the classic form.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Superscript
  function: Replaces lining or oldstyle figures with superior figures (primarily for
    footnote indication), and replaces lowercase letters with superior letters (primarily
    for abbreviated French titles).
  recommended implementation: The 'sups' table maps figures and lowercase letters
    to the corresponding superior forms (GSUB lookup type 1).
  registered by: Microsoft/Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
swsh:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If implemented
    in a font using an alternate substitution lookup, the application selects one
    of the alternative glyphs based on user choice or other criteria.'
  example: The user inputs the ampersand character when setting text with Poetica
    with this feature active, and is presented with a choice of the 63 ampersand forms
    in that face.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Swash
  function: This feature replaces default character glyphs with corresponding swash
    glyphs. Note that there may be more than one swash alternate for a given character.
  recommended implementation: The 'swsh' table maps GIDs for default forms to those
    for one or more corresponding swash forms. While many of these substitutions are
    one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup
    type 3). The manufacturer may choose to build two tables (one for each lookup
    type) or only one which uses lookup type 3 for all substitutions. If several styles
    of swash are present across the font, the set of forms for each character should
    be ordered consistently.
  registered by: Microsoft/Adobe
  script/language sensitivity: Not used for ideographic scripts.
  ui suggestion: This feature should be inactive by default. When implemented in the
    font using an alternate substitution lookup, an application could display the
    alternate forms sequentially in context, or present a palette showing all the
    forms at once, or give the user a choice between these approaches. The application
    may assume that the first glyph in a set is the preferred form, so the font developer
    should order them accordingly.
titl:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user applies this feature in Adobe Garamond to get the titling caps.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Titling
  function: This feature replaces the default glyphs with corresponding forms designed
    specifically for titling. These may be all-capital and/or larger on the body,
    and adjusted for viewing at larger sizes.
  recommended implementation: The 'titl' table maps default forms to corresponding
    titling forms (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default.
tjmo:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Hangul script, the jamo cluster is composed of three parts (leading
    consonant, vowel, and trailing consonant). When a sequence of trailing class jamos
    are found, their combined trailing jamo form is substituted.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Trailing Jamo Forms
  function: Substitutes the trailing jamo form of a cluster.
  recommended implementation: The default glyph for a trailing jamo is mapped into
    an alternate form required for conjoining in a syllable (GSUB lookup type 1, or
    a contextual substitution referencing a type 1 lookup.
  registered by: Microsoft
  script/language sensitivity: Used for Hangul script, particularly when Unicode conjoining
    jamo characters are used.
  ui suggestion: Control of this feature should not generally be exposed to the user.
tnam:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. Note: This is
    a change of character code. Besides the original character code, the application
    should store the code for the new character.'
  example: The user inputs U+4E9C and gets U+4E9E.
  feature interaction: May include some characters affected by the Proportional Alternate
    Widths feature ('palt');'trad'and 'tnam' are mutually exclusive, and override
    the results of'smpl'.
  friendly name: Traditional Name Forms
  function: "Replaces \u201Csimplified\u201D Japanese kanji forms with the corresponding\
    \ \u201Ctraditional\u201D forms. This is equivalent to the Traditional Forms feature,\
    \ but explicitly limited to the traditional forms considered proper for use in\
    \ personal names (as many as 205 glyphs in some fonts)."
  recommended implementation: The 'tnam' table maps simplified forms in a font to
    corresponding traditional forms which can be used in personal names (GSUB lookup
    type 1). The application stores a record of any simplified forms which resulted
    from substitutions (the'smpl'feature); for such forms, applying the 'tnam' feature
    undoes the previous substitution.
  registered by: Adobe
  script/language sensitivity: Used only for Japanese.
  ui suggestion: This feature should be off by default.
tnum:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may apply this feature to get oldstyle figures to align vertically
    in a column.
  feature interaction: This feature overrides the results of the Proportional Figures
    feature ('pnum').
  friendly name: Tabular Figures
  function: Replaces figure glyphs set on proportional widths with corresponding glyphs
    set on uniform (tabular) widths. Tabular widths will generally be the default,
    but this cannot be safely assumed. Of course this feature would not be present
    in monospaced designs.
  recommended implementation: In order to simplify associated kerning and get the
    best glyph design for a given width, this feature should use new glyphs for the
    figures, rather than only adjusting the fit of the proportional glyphs (although
    some may be simple copies); i.e. not a GPOS feature. The 'tnum' table maps proportional
    versions of lining &/or oldstyle figures to corresponding tabular glyphs (GSUB
    lookup type 1).
  registered by: Adobe
  script/language sensitivity: None.
  ui suggestion: This feature should be off by default. The application may want to
    query the user about this feature when the user changes figure style ('onum'or'lnum').
trad:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria. If implemented
    in a font using an alternate substitution lookup, the application selects one
    of the alternative glyphs based on user choice or other criteria. The application
    stores a record of any simplified forms which resulted from substitutions (the''smpl''feature);
    for such forms, applying the ''trad'' feature undoes the previous substitution.
    Note: This is a change of character code. Besides the original character code,
    the application should store the code for the new character.'
  example: The user inputs U+53F0 and is offered a choice of U+6AAF, U+81FA, or U+98B1.
  feature interaction: May include some characters affected by the Proportional Alternate
    Widths feature ('palt'); 'trad' and'tnam'are mutually exclusive, and override
    the results of'smpl'.
  friendly name: Traditional Forms
  function: Replaces 'simplified' Chinese hanzi or Japanese kanji forms with the corresponding
    'traditional' forms.
  recommended implementation: The 'trad' table maps each simplified form in a font
    to one or more traditional forms. While many of these substitutions are one-to-one
    (GSUB lookup type 1), others require a selection from a set (GSUB lookup type
    3). The manufacturer may choose to build two tables (one for each lookup type)
    or only one which uses lookup type 3 for all substitutions. As in any one-from-many
    substitution, alternates present in more than one face should be ordered consistently
    across a family, so that those alternates can work correctly when switching between
    family members.
  registered by: Adobe
  script/language sensitivity: Used only for Chinese and Japanese.
  ui suggestion: "This feature should be inactive by default. If there\u2019s no record\
    \ of a conversion from traditional to simplified, the user must be offered a set\
    \ of possibilities from which to select. The application may note the user\u2019\
    s choice, and offer it as a default the next time the source simplified character\
    \ is encountered. In the absence of such prior information, the application may\
    \ assume that the first glyph in a set is the preferred form, so the font developer\
    \ should order them accordingly."
twid:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may apply 'twid' to place a three-digit figure in a single slot
    in a column of vertical text.
  feature interaction: "This feature is mutually exclusive with all other glyph-width\
    \ features (e.g.'fwid','halt','hwid'and'qwid'), which should be turned off when\
    \ it\u2019s applied. It deactivates the'kern'feature."
  friendly name: Third Widths
  function: Replaces glyphs on other widths with glyphs set on widths of one third
    of an em. The characters involved are normally figures and some forms of punctuation.
  recommended implementation: The font may contain alternate glyphs designed to be
    set on third-em widths (GSUB lookup type 1), or it may specify alternate metrics
    for the original glyphs (GPOS lookup type 1) which adjust their spacing to fit
    in third-em widths.
  registered by: Adobe
  script/language sensitivity: Generally used only in CJKV fonts.
  ui suggestion: This feature would normally be off by default.
unic:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user enters text as uppercase, lowercase or mixed case, and gets unicase
    text.
  feature interaction: This feature may be used in combination with other substitution
    (GSUB) features, whose results it may override.
  friendly name: Unicase
  function: This feature maps upper- and lowercase letters to a mixed set of lowercase
    and small capital forms, resulting in a single case alphabet (for an example of
    unicase, see the Emigre type family Filosofia). The letters substituted may vary
    from font to font, as appropriate to the design. If aligning to the x-height,
    smallcap glyphs may be substituted, or specially designed unicase forms might
    be used. Substitutions might also include specially designed figures.
  recommended implementation: Uppercase and lowercase glyphs are mapped to corresponding
    unicase forms (GSUB lookup type 1).
  registered by: Tiro Typeworks / Emigre
  script/language sensitivity: Used for bicameral scripts (i.e. those with case differences),
    such as Latin, Greek, Cyrillic, and Armenian.
  ui suggestion: This feature should be off by default.
valt:
  application interface: Should be applied to runs of characters for applicable scripts
    in vertical text layout.
  example: Applying this feature would shift a Roman h down, or y up, from their default
    full-width positions.
  feature interaction: "This feature is mutually exclusive with all other glyph-height\
    \ features (e.g.'vhal'and'vpal'), which should be turned off when it\u2019s applied.\
    \ It deactivates the'kern'feature."
  friendly name: Alternate Vertical Metrics
  function: Repositions glyphs to visually center them within full-height metrics,
    for use in vertical setting. Applies to full-width Latin, Greek, or Cyrillic glyphs,
    which are typically included in East Asian fonts, and whose glyphs are aligned
    on a common horizontal baseline and not rotated relative to the page or text frame.
  recommended implementation: The font specifies alternate metrics for the original
    glyphs (GPOS lookup type 1, YPlacement).
  registered by: Adobe
  script/language sensitivity: Used for scripts with vertical writing modes.
  ui suggestion: This feature should be active by default in vertical-setting contexts.
vatu:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In the Devanagari script, the consonant Ra takes a vattu form, when it
    is not the syllable initial consonant in a conjunct. This vattu form ligates with
    the base consonant as well as half forms of consonants.
  feature interaction: "This feature may be used in conjunction with certain other\
    \ features \u2014'nukt','akhn','rphf','rkrf','pref','blwf','half','pstf','cjct'\u2014\
    \ to derive required forms of Indic scripts. For Indic script implementations\
    \ that use the Vattu Variants feature, the application is expected to process\
    \ this and the other features in an appropriate order to obtain the correct basic\
    \ forms. Other discretionary features for optional typographic effects may also\
    \ be applied. Lookups for such discretionary features should be processed after\
    \ lookups for this feature have been processed."
  friendly name: Vattu Variants
  function: ': In an Indic consonant conjunct, substitutes a ligature glyph for a
    base consonant and a following vattu (below-base) form of a conjoining consonant,
    or for a half form of a consonant and a following vattu form.'
  recommended implementation: The 'vatu' table maps consonant and vattu form combinations
    to their respective ligatures (GSUB lookup type 4).
  registered by: Microsoft
  script/language sensitivity: Used for Devanagari and other Indic or Brahmi-derived
    scripts.
  ui suggestion: Control of the feature should not generally be exposed to the user.
vchw:
  application interface: If a layout engine supports advanced layout for CJK text
    as described inCLREQ,JLREQorKLREQ, this feature should not be used. Otherwise,
    this feature should always be applied in vertical layout of CJK text.
  example: "When PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS (U+FE36; \u201C\uFE36\
    \u201D, vertical form of FULLWIDTH RIGHT PARENTHESIS U+FF09; \u201C)\u201D) is\
    \ followed by PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA (U+FE11; \u201C\
    \uFE11\u201D, vertical form of IDEOGRAPHIC COMMA U+3001; \u201C\u3001\u201D),\
    \ the former is re-spaced to remove half-em of height between them."
  feature interaction: This feature is mutually exclusive with all other glyph-height
    features (e.g.,'valt','vhal','vpal'), which should be turned off when this feature
    is applied. It deactivates the'vkrn'feature. See also'chws'.
  friendly name: Vertical Contextual Half-width Spacing
  function: Contextually re-spaces glyphs designed to be set on full-em heights, fitting
    them onto individual half-width vertical heights, to approximate more sophisticated
    text layout, such as what is described inRequirements for Japanese Text Layout
    (JLREQ)or similar CJK text-layout specifications that expect half-width forms
    of characters whose default glyphs are full-width.* This differs from 'vhal' in
    that the re-spacing is contextual. This feature may be invoked to get better fit
    for punctuation or symbol glyphs without disrupting the monospaced alignment.
  recommended implementation: The font stores a set of adjustments for pairs of glyphs
    (GPOS lookup type 2 or 8, XPlacement, XAdvance, YPlacement, and YAdvance). These
    may be stored as one or more tables matching left and right classes, and/or as
    individual pairs. Additional adjustments may be provided for larger sets of glyphs
    (e.g. triplets, quadruplets, etc.) to overwrite the results of pair kerns in particular
    combinations.
  registered by: Adobe/W3C
  script/language sensitivity: Used mostly in CJKV fonts.
  ui suggestion: This feature should not be used in combination with a layout engine
    that independently provides advanced layout as described inCLREQ,JLREQorKLREQ.
    For applications that provide such advanced layout, it may appropriate not to
    expose control of this feature to users. In applications that do not support such
    advanced layout, this feature should be enabled by default for vertical layout
    of CJK text.
vert:
  application interface: Should be applied to runs of characters for applicable scripts
    in vertical text layout.
  example: In vertical writing mode, the opening parenthesis (U+FF08) is replaced
    by the rotated form (U+FE35).
  feature interaction: 'The ''vert'' and''vrtr''features are intended to be used in
    conjunction: ''vert'' for glyphs to be presented upright in vertical writing,
    and ''vrtr'' for glyphs intended to be presented sideways. Since they must never
    be activated simultaneously for a given glyph, there should be no interaction
    between the two features. These features are intended for layout engines that
    graphically rotate glyphs for sideways runs in vertical writing mode, such as
    those conforming toUnicode Technical Report #50: Unicode Vertical Text Layout.'
  friendly name: Vertical Alternates
  function: "Transforms default glyphs into glyphs that are appropriate for upright\
    \ presentation in vertical writing mode. While the glyphs for most characters\
    \ in East Asian writing systems remain upright when set in vertical writing mode,\
    \ some must be transformed \u2014 usually by rotation, shifting, or different\
    \ component ordering \u2014 for vertical writing mode."
  recommended implementation: The font includes versions of the glyphs covered by
    this feature that differ in some visual way from the default glyphs, such as by
    rotation, shifting, or different component ordering. The 'vert' feature maps the
    default glyphs to the corresponding, alternate glyphs for vertical writing mode
    using a type 1 (single substitution) GSUB lookup.
  registered by: Microsoft/Adobe
  script/language sensitivity: Used for scripts with vertical writing modes.
  ui suggestion: This feature should be active by default in vertical writing mode.
vhal:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a CJKV font to get better fit for punctuation
    or symbol glyphs without disrupting the monospaced alignment.
  feature interaction: This feature is mutually exclusive with all other glyph-height
    features (e.g.,'valt'and'vpal'), which should be turned off when this feature
    is applied. It deactivates the'kern'feature. See also'halt'.
  friendly name: Alternate Vertical Half Metrics
  function: Re-spaces glyphs designed to be set on full-em heights, fitting them onto
    half-em heights. This differs from'valt', which repositions a glyph but does not
    affect its advance.
  recommended implementation: The font specifies alternate metrics for the full-height
    glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).
  registered by: Adobe
  script/language sensitivity: Used only in CJKV fonts.
  ui suggestion: In general, this feature should be off by default. Different behavior
    should be used, however, in applications that conform to Requirements forJapanese
    Text Layout (JLREQ)or similar CJK text-layout specifications that expect half-width
    forms of characters whose default glyphs are full-width. Such implementations
    should turn this feature on by default, or should selectively apply this feature
    to particular characters that require special treatment for CJK text-layout purposes,
    such as brackets, punctuation, and quotation marks.
vjmo:
  application interface: In recommended usage, this feature triggers substitutions
    required for correct layout of certain scripts. It should be applied in the appropriate
    contexts, as determined by script-specific processing requirements.
  example: In Hangul script, the jamo cluster is composed of three parts (leading
    consonant, vowel, and trailing consonant). When a sequence of vowel class jamos
    are found, their combined vowel jamo form is substituted.
  feature interaction: This feature overrides the results of all other features.
  friendly name: Vowel Jamo Forms
  function: Substitutes the vowel jamo form of a cluster.
  recommended implementation: The default glyph for a vowel jamo is mapped into an
    alternate form required for conjoining in a syllable (GSUB lookup type 1, or a
    contextual substitution that references a type 1 lookup).
  registered by: Microsoft
  script/language sensitivity: Used for Hangul script, particularly when Unicode conjoining
    jamo characters are used.
  ui suggestion: Control of the feature should not generally be exposed to the user.
vkna:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: Standard full-width kana (hiragana and katakana) are replaced by forms
    that are designed for vertical use.
  feature interaction: Since this feature is only for vertical use, features applying
    to horizontal behaviors (e.g.'kern') do not apply.
  friendly name: Vertical Kana Alternates
  function: Replaces standard kana with forms that have been specially designed for
    only vertical writing. This is a typographic optimization for improved fit and
    more even color. Also see'hkna'.
  recommended implementation: The font includes a set of specially-designed glyphs,
    listed in the 'vkna' coverage table. The 'vkna' feature maps the standard full-width
    forms to the corresponding special vertical forms (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used only for Hiragana and Katakana.
  ui suggestion: This feature would be off by default.
vkrn:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: When the katakana character U+30B9 or U+30D8 is followed by U+30C8 in a
    vertical setting, U+30C8 is shifted up to fit more evenly.
  feature interaction: If 'vkrn' is activated,'vpal'must also be activated if it exists.
    If'vpal'is activated, there is no requirement that 'vkrn' must also be activated.
    May be used in addition to any other feature except those which result in fixed
    (uniform) advance heights.
  friendly name: Vertical Kerning
  function: "Adjusts amount of space between glyphs, generally to provide optically\
    \ consistent spacing between glyphs. Although a well-designed typeface has consistent\
    \ inter-glyph spacing overall, some glyph combinations require adjustment for\
    \ improved legibility. Besides standard adjustment in the vertical direction,\
    \ this feature can supply size-dependent kerning data via device tables, \u201C\
    cross-stream\u201D kerning in the X text direction, and adjustment of glyph placement\
    \ independent of the advance adjustment. Note that this feature may apply to runs\
    \ of more than two glyphs, and would not be used in monospaced fonts. Also note\
    \ that this feature applies only to text set vertically."
  recommended implementation: The font stores a set of adjustments for pairs of glyphs
    (GPOS lookup type 2 or 8). These may be stored as one or more tables matching
    left and right classes, and/or as individual pairs. Additional adjustments may
    be provided for larger sets of glyphs (e.g. triplets, quadruplets, etc.) to overwrite
    the results of pair kerns in particular combinations.
  registered by: Adobe
  script/language sensitivity: None
  ui suggestion: This feature should be active by default for vertical text setting.
    Applications may wish to allow users to add further manually-specified adjustments
    to suit specific needs and tastes.
vpal:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: The user may invoke this feature in a Japanese font to get Latin, Kanji,
    Kana or Symbol glyphs with the full-height design but individual metrics.
  feature interaction: "This feature is mutually exclusive with all other glyph-height\
    \ features (e.g.'valt'and'vhal'), which should be turned off when it\u2019s applied.\
    \ If 'vpal' is activated, there is no requirement that'vkrn'must also be activated.\
    \ If'vkrn'is activated, 'vpal' must also be activated if it exists. See also'palt'."
  friendly name: Proportional Alternate Vertical Metrics
  function: Re-spaces glyphs designed to be set on full-em heights, fitting them onto
    individual (more or less proportional) vertical heights. This differs from'valt',
    which repositions a glyph but does not affect its advance.
  recommended implementation: The font specifies alternate heights for the full-height
    glyphs (GPOS lookup type 1, XPlacement, XAdvance, YPlacement and YAdvance).
  registered by: Adobe
  script/language sensitivity: Used mostly in CJKV fonts.
  ui suggestion: This feature would be off by default.
vrt2:
  application interface: 'Discretionary feature: can be applied to glyph runs in vertical
    text layout based on document markup, user control or other application criteria.'
  example: Proportional- or half-width Latin and half-width katakana characters are
    rotated 90 degrees clockwise for vertical writing.
  feature interaction: Overrides the'vert'(Vertical Writing) feature, which is a subset
    of this one. May be used in addition to any other feature.
  friendly name: Vertical Alternates and Rotation
  function: Replaces some fixed-width (half-, third- or quarter-width) or proportional-width
    glyphs (mostly Latin or katakana) with forms suitable for vertical writing (that
    is, rotated 90 degrees clockwise). Note that these are a superset of the glyphs
    covered in the 'vert' table.
  recommended implementation: The font includes rotated versions of the glyphs covered
    by this feature. The 'vrt2' table maps the standard (horizontal) forms to the
    corresponding vertical (rotated) forms (GSUB lookup type 1). This feature should
    be the last substitution in the font, and take input from other features.
  registered by: Adobe
  script/language sensitivity: Used for scripts with vertical writing modes.
  ui suggestion: This feature should be active by default when vertical writing mode
    is on, although the user must be able to override it.
vrtr:
  application interface: Should be applied to applicable characters in vertical text
    layout.
  example: "As a first example, the glyphs for FULLWIDTH LESS-THAN SIGN (U+FF1C \u201C\
    \uFF1C\u201D) and FULLWIDTH GREATER-THAN SIGN (U+FF1E \u201C\uFF1E\u201D) in a\
    \ font with a non-square em-box are transformed into glyphs whose aspect ratio\
    \ differs from the default glyphs, which are properly sized for sideways presentation\
    \ in vertical writing mode. As a second example, the glyph for LEFT SQUARE BRACKET\
    \ (U+005B, \u201C[\u201D) in a brush-script font that exhibits slightly rising\
    \ horizontal strokes may use an obtuse angle for its upper-left corner when in\
    \ horizontal writing mode, but an alternate glyph with an acute angle for that\
    \ corner is supplied for vertical writing mode."
  feature interaction: 'The ''vrtr'' and''vert''features are intended to be used in
    conjunction: ''vrtr'' for glyphs intended to be presented sideways in vertical
    writing, and ''vert'' for glyphs to be presented upright. Since they must never
    be activated simultaneously for a given glyph, there should be no interaction
    between the two features. These features are intended for layout engines that
    graphically rotate glyphs for sideways runs in vertical writing mode, such as
    those conforming toUnicode Technical Report #50: Unicode Vertical Text Layout.'
  friendly name: Vertical Alternates for Rotation
  function: "Transforms default glyphs into glyphs that are appropriate for sideways\
    \ presentation in vertical writing mode. While the glyphs for most characters\
    \ in East Asian writing systems remain upright when set in vertical writing mode,\
    \ glyphs for other characters \u2014 such as those of other scripts or for particular\
    \ Western-style punctuation \u2014 are expected to be presented sideways in vertical\
    \ writing."
  recommended implementation: The font includes versions of the glyphs covered by
    this feature that, when rotated 90 degrees clockwise by the layout engine for
    sideways presentation in vertical writing, differ in some visual way from rotated
    versions of the default glyphs, such as by shifting or shape. The 'vrtr' feature
    maps the default glyphs to the corresponding to-be-rotated glyphs (GSUB lookup
    type 1).
  registered by: Adobe/Microsoft/W3C
  script/language sensitivity: Applies to any script when set in vertical writing
    mode.
  ui suggestion: This feature should always be active by default for sideways runs
    in vertical writing mode.
zero:
  application interface: 'Discretionary feature: can be applied to glyph runs based
    on document markup, user control or other application criteria.'
  example: When setting labels, the user applies this feature to get the slashed 0.
  feature interaction: Applies only to lining figures, so is inactivated by oldstyle
    figure features (e.g.'onum').
  friendly name: Slashed Zero
  function: Some fonts contain both a default form of zero, and an alternative form
    which uses a diagonal slash through the counter. Especially in condensed designs,
    it can be difficult to distinguish between 0 and O (zero and capital O) in any
    situation where capitals and lining figures may be arbitrarily mixed. This feature
    allows the user to change from the default 0 to a slashed form.
  recommended implementation: The 'zero' table maps the GIDs for the lining forms
    of zero to corresponding slashed forms (GSUB lookup type 1).
  registered by: Adobe
  script/language sensitivity: Used only for 0.
  ui suggestion: Optimally, the application would store this as a preference setting,
    and the user could use the feature to toggle back and forth between the two forms.
    Most applications will want the default setting to disable this feature.
